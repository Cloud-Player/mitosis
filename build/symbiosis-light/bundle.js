!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=27)}([function(e,t,n){"use strict";var r=n(2),i=n(3);var s=n(8),o=n(12);var a="function"==typeof Symbol&&Symbol.observable||"@@observable";function c(){}function u(e){return e?1===e.length?e[0]:function(t){return e.reduce(function(e,t){return t(e)},t)}:c}var h=n(1),l=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r=this.operator,a=function(e,t,n){if(e){if(e instanceof i.a)return e;if(e[s.a])return e[s.a]()}return e||t||n?new i.a(e,t,n):new i.a(o.a)}(e,t,n);if(r?r.call(a,this.source):a.add(this.source||h.a.useDeprecatedSynchronousErrorHandling&&!a.syncErrorThrowable?this._subscribe(a):this._trySubscribe(a)),h.a.useDeprecatedSynchronousErrorHandling&&a.syncErrorThrowable&&(a.syncErrorThrowable=!1,a.syncErrorThrown))throw a.syncErrorValue;return a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){h.a.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),!function(e){for(;e;){var t=e,n=t.closed,r=t.destination,s=t.isStopped;if(n||s)return!1;e=r&&r instanceof i.a?r:null}return!0}(e)?console.warn(t):e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=d(t))(function(t,r){var i;i=n.subscribe(function(t){try{e(t)}catch(e){r(e),i&&i.unsubscribe()}},r,t)})},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[a]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:u(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=d(e))(function(e,n){var r;t.subscribe(function(e){return r=e},function(e){return n(e)},function(){return e(r)})})},e.create=function(t){return new e(t)},e}();function d(e){if(e||(e=h.a.Promise||Promise),!e)throw new Error("no Promise impl found");return e}var f=n(4);function g(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}g.prototype=Object.create(Error.prototype);var p=g,_=function(e){function t(t,n){var r=e.call(this)||this;return r.subject=t,r.subscriber=n,r.closed=!1,r}return r.a(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var n=t.indexOf(this.subscriber);-1!==n&&t.splice(n,1)}}},t}(f.a);n.d(t,"a",function(){return b});var y=function(e){function t(t){var n=e.call(this,t)||this;return n.destination=t,n}return r.a(t,e),t}(i.a),b=function(e){function t(){var t=e.call(this)||this;return t.observers=[],t.closed=!1,t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return r.a(t,e),t.prototype[s.a]=function(){return new y(this)},t.prototype.lift=function(e){var t=new m(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new p;if(!this.isStopped)for(var t=this.observers,n=t.length,r=t.slice(),i=0;i<n;i++)r[i].next(e)},t.prototype.error=function(e){if(this.closed)throw new p;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),i=0;i<n;i++)r[i].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new p;this.isStopped=!0;for(var e=this.observers,t=e.length,n=e.slice(),r=0;r<t;r++)n[r].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new p;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new p;return this.hasError?(e.error(this.thrownError),f.a.EMPTY):this.isStopped?(e.complete(),f.a.EMPTY):(this.observers.push(e),new _(this,e))},t.prototype.asObservable=function(){var e=new l;return e.source=this,e},t.create=function(e,t){return new m(e,t)},t}(l),m=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return r.a(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):f.a.EMPTY},t}(b)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){e&&(new Error).stack;r=e},get useDeprecatedSynchronousErrorHandling(){return r}}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(2),i=n(15),s=n(12),o=n(4),a=n(8),c=n(1),u=n(9),h=function(e){function t(n,r,i){var o=e.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,o._parentSubscription=null,arguments.length){case 0:o.destination=s.a;break;case 1:if(!n){o.destination=s.a;break}if("object"==typeof n){n instanceof t?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new l(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new l(o,n,r,i)}return o}return r.a(t,e),t.prototype[a.a]=function(){return this},t.create=function(e,n,r){var i=new t(e,n,r);return i.syncErrorThrowable=!1,i},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parent,t=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=e,this._parents=t,this._parentSubscription=null,this},t}(o.a),l=function(e){function t(t,n,r,o){var a,c=e.call(this)||this;c._parentSubscriber=t;var u=c;return Object(i.a)(n)?a=n:n&&(a=n.next,r=n.error,o=n.complete,n!==s.a&&(u=Object.create(n),Object(i.a)(u.unsubscribe)&&c.add(u.unsubscribe.bind(u)),u.unsubscribe=c.unsubscribe.bind(c))),c._context=u,c._next=a,c._error=r,c._complete=o,c}return r.a(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;c.a.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,n=c.a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)n?(t.syncErrorValue=e,t.syncErrorThrown=!0):Object(u.a)(e),this.unsubscribe();else{if(this.unsubscribe(),n)throw e;Object(u.a)(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};c.a.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),c.a.useDeprecatedSynchronousErrorHandling)throw e;Object(u.a)(e)}},t.prototype.__tryOrSetError=function(e,t,n){if(!c.a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,n)}catch(t){return c.a.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(Object(u.a)(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(h)},function(e,t,n){"use strict";var r=Array.isArray||function(e){return e&&"number"==typeof e.length};var i,s=n(15),o={e:{}};function a(){try{return i.apply(this,arguments)}catch(e){return o.e=e,o}}function c(e){return i=e,a}function u(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map(function(e,t){return t+1+") "+e.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}u.prototype=Object.create(Error.prototype);var h=u;n.d(t,"a",function(){return l});var l=function(){function e(e){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,e&&(this._unsubscribe=e)}var t;return e.prototype.unsubscribe=function(){var e,t=!1;if(!this.closed){var n=this._parent,i=this._parents,a=this._unsubscribe,u=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var l,f=-1,g=i?i.length:0;n;)n.remove(this),n=++f<g&&i[f]||null;if(Object(s.a)(a))c(a).call(this)===o&&(t=!0,e=e||(o.e instanceof h?d(o.e.errors):[o.e]));if(r(u))for(f=-1,g=u.length;++f<g;){var p=u[f];if(null!=(l=p)&&"object"==typeof l)if(c(p.unsubscribe).call(p)===o){t=!0,e=e||[];var _=o.e;_ instanceof h?e=e.concat(d(_.errors)):e.push(_)}}if(t)throw new h(e)}},e.prototype.add=function(t){if(!t||t===e.EMPTY)return e.EMPTY;if(t===this)return this;var n=t;switch(typeof t){case"function":n=new e(t);case"object":if(n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if("function"!=typeof n._addParent){var r=n;(n=new e)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}return(this._subscriptions||(this._subscriptions=[])).push(n),n._addParent(this),n},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},e.prototype._addParent=function(e){var t=this._parent,n=this._parents;t&&t!==e?n?-1===n.indexOf(e)&&n.push(e):this._parents=[e]:this._parent=e},e.EMPTY=((t=new e).closed=!0,t),e}();function d(e){return e.reduce(function(e,t){return e.concat(t instanceof h?t.errors:t)},[])}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(2),i=n(3);function s(e,t){return function(n){return n.lift(new o(e,t))}}var o=function(){function e(e,t){this.predicate=e,this.thisArg=t}return e.prototype.call=function(e,t){return t.subscribe(new a(e,this.predicate,this.thisArg))},e}(),a=function(e){function t(t,n,r){var i=e.call(this,t)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return r.a(t,e),t.prototype._next=function(e){var t;try{t=this.predicate.call(this.thisArg,e,this.count++)}catch(e){return void this.destination.error(e)}t&&this.destination.next(e)},t}(i.a)},function(e,t){var n,r,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var c,u=[],h=!1,l=-1;function d(){h&&c&&(h=!1,c.length?u=c.concat(u):l=-1,u.length&&f())}function f(){if(!h){var e=a(d);h=!0;for(var t=u.length;t;){for(c=u,u=[];++l<t;)c&&c[l].run();l=-1,t=u.length}c=null,h=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function p(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new g(e,t)),1!==u.length||h||a(f)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=p,i.addListener=p,i.once=p,i.off=p,i.removeListener=p,i.removeAllListeners=p,i.emit=p,i.prependListener=p,i.prependOnceListener=p,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()},function(e,t,n){"use strict";function r(e){setTimeout(function(){throw e})}n.d(t,"a",function(){return r})},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";var r=n(17),i=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=l;var s=n(14);s.inherits=n(10);var o=n(19),a=n(23);s.inherits(l,o);for(var c=i(a.prototype),u=0;u<c.length;u++){var h=c[u];l.prototype[h]||(l.prototype[h]=a.prototype[h])}function l(e){if(!(this instanceof l))return new l(e);o.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||r.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),l.prototype._destroy=function(e,t){this.push(null),this.end(),r.nextTick(t,e)}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),i=n(9),s={closed:!0,next:function(e){},error:function(e){if(r.a.useDeprecatedSynchronousErrorHandling)throw e;Object(i.a)(e)},complete:function(){}}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(29),i=n(30),s=n(31);function o(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(o()<t)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=c.prototype:(null===e&&(e=new c(t)),e.length=t),e}function c(e,t,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);c.TYPED_ARRAY_SUPPORT?(e=t).__proto__=c.prototype:e=d(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|g(t,n),i=(e=a(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(c.isBuffer(t)){var n=0|f(t.length);return 0===(e=a(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):d(e,t);if("Buffer"===t.type&&s(t.data))return d(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function h(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(h(t),e=a(e,t<0?0:0|f(t)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|f(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function f(e){if(e>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|e}function g(e,t){if(c.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return F(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(e).length;default:if(r)return F(e).length;t=(""+t).toLowerCase(),r=!0}}function p(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function _(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=c.from(t,r)),c.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var s,o=1,a=e.length,c=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,a/=2,c/=2,n/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){var h=-1;for(s=n;s<a;s++)if(u(e,s)===u(t,-1===h?0:s-h)){if(-1===h&&(h=s),s-h+1===c)return h*o}else-1!==h&&(s-=s-h),h=-1}else for(n+c>a&&(n=a-c),s=n;s>=0;s--){for(var l=!0,d=0;d<c;d++)if(u(e,s+d)!==u(t,d)){l=!1;break}if(l)return s}return-1}function b(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var s=t.length;if(s%2!=0)throw new TypeError("Invalid hex string");r>s/2&&(r=s/2);for(var o=0;o<r;++o){var a=parseInt(t.substr(2*o,2),16);if(isNaN(a))return o;e[n+o]=a}return o}function m(e,t,n,r){return W(F(t,e.length-n),e,n,r)}function v(e,t,n,r){return W(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function E(e,t,n,r){return v(e,t,n,r)}function C(e,t,n,r){return W(q(t),e,n,r)}function S(e,t,n,r){return W(function(e,t){for(var n,r,i,s=[],o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,i=n%256,s.push(i),s.push(r);return s}(t,e.length-n),e,n,r)}function w(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function I(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var s,o,a,c,u=e[i],h=null,l=u>239?4:u>223?3:u>191?2:1;if(i+l<=n)switch(l){case 1:u<128&&(h=u);break;case 2:128==(192&(s=e[i+1]))&&(c=(31&u)<<6|63&s)>127&&(h=c);break;case 3:s=e[i+1],o=e[i+2],128==(192&s)&&128==(192&o)&&(c=(15&u)<<12|(63&s)<<6|63&o)>2047&&(c<55296||c>57343)&&(h=c);break;case 4:s=e[i+1],o=e[i+2],a=e[i+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(c=(15&u)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&c<1114112&&(h=c)}null===h?(h=65533,l=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=l}return function(e){var t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}t.Buffer=c,t.SlowBuffer=function(e){+e!=e&&(e=0);return c.alloc(+e)},t.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=o(),c.poolSize=8192,c._augment=function(e){return e.__proto__=c.prototype,e},c.from=function(e,t,n){return u(null,e,t,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(e,t,n){return function(e,t,n,r){return h(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},c.allocUnsafe=function(e){return l(null,e)},c.allocUnsafeSlow=function(e){return l(null,e)},c.isBuffer=function(e){return!(null==e||!e._isBuffer)},c.compare=function(e,t){if(!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,s=Math.min(n,r);i<s;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=c.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var o=e[n];if(!c.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)p(this,t,t+1);return this},c.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)p(this,t,t+3),p(this,t+1,t+2);return this},c.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)p(this,t,t+7),p(this,t+1,t+6),p(this,t+2,t+5),p(this,t+3,t+4);return this},c.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?I(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,n);case"utf8":case"utf-8":return I(this,t,n);case"ascii":return R(this,t,n);case"latin1":case"binary":return A(this,t,n);case"base64":return w(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},c.prototype.compare=function(e,t,n,r,i){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var s=(i>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0),a=Math.min(s,o),u=this.slice(r,i),h=e.slice(t,n),l=0;l<a;++l)if(u[l]!==h[l]){s=u[l],o=h[l];break}return s<o?-1:o<s?1:0},c.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},c.prototype.indexOf=function(e,t,n){return _(this,e,t,n,!0)},c.prototype.lastIndexOf=function(e,t,n){return _(this,e,t,n,!1)},c.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var s=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return m(this,e,t,n);case"ascii":return v(this,e,t,n);case"latin1":case"binary":return E(this,e,t,n);case"base64":return C(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,n);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function R(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function A(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function P(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",s=t;s<n;++s)i+=j(e[s]);return i}function O(e,t,n){for(var r=e.slice(t,n),i="",s=0;s<r.length;s+=2)i+=String.fromCharCode(r[s]+256*r[s+1]);return i}function M(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,r,i,s){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<s)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function L(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,s=Math.min(e.length-n,2);i<s;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function k(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,s=Math.min(e.length-n,4);i<s;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function D(e,t,n,r,i,s){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(e,t,n,r,s){return s||D(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function x(e,t,n,r,s){return s||D(e,0,n,8),i.write(e,t,n,r,52,8),n+8}c.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=c.prototype;else{var i=t-e;n=new c(i,void 0);for(var s=0;s<i;++s)n[s]=this[s+e]}return n},c.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var r=this[e],i=1,s=0;++s<t&&(i*=256);)r+=this[e+s]*i;return r},c.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},c.prototype.readUInt8=function(e,t){return t||M(e,1,this.length),this[e]},c.prototype.readUInt16LE=function(e,t){return t||M(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUInt16BE=function(e,t){return t||M(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUInt32LE=function(e,t){return t||M(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUInt32BE=function(e,t){return t||M(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var r=this[e],i=1,s=0;++s<t&&(i*=256);)r+=this[e+s]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},c.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var r=t,i=1,s=this[e+--r];r>0&&(i*=256);)s+=this[e+--r]*i;return s>=(i*=128)&&(s-=Math.pow(2,8*t)),s},c.prototype.readInt8=function(e,t){return t||M(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){t||M(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(e,t){t||M(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(e,t){return t||M(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return t||M(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readFloatLE=function(e,t){return t||M(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return t||M(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return t||M(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return t||M(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,s=0;for(this[t]=255&e;++s<n&&(i*=256);)this[t+s]=e/i&255;return t+n},c.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,s=1;for(this[t+i]=255&e;--i>=0&&(s*=256);)this[t+i]=e/s&255;return t+n},c.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},c.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},c.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},c.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):k(this,e,t,!0),t+4},c.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},c.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);N(this,e,t,n,i-1,-i)}var s=0,o=1,a=0;for(this[t]=255&e;++s<n&&(o*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/o>>0)-a&255;return t+n},c.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);N(this,e,t,n,i-1,-i)}var s=n-1,o=1,a=0;for(this[t+s]=255&e;--s>=0&&(o*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/o>>0)-a&255;return t+n},c.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),c.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):L(this,e,t,!0),t+2},c.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):L(this,e,t,!1),t+2},c.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):k(this,e,t,!0),t+4},c.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),c.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},c.prototype.writeFloatLE=function(e,t,n){return B(this,e,t,!0,n)},c.prototype.writeFloatBE=function(e,t,n){return B(this,e,t,!1,n)},c.prototype.writeDoubleLE=function(e,t,n){return x(this,e,t,!0,n)},c.prototype.writeDoubleBE=function(e,t,n){return x(this,e,t,!1,n)},c.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,s=r-n;if(this===e&&n<t&&t<r)for(i=s-1;i>=0;--i)e[i+t]=this[i+n];else if(s<1e3||!c.TYPED_ARRAY_SUPPORT)for(i=0;i<s;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},c.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{var o=c.isBuffer(e)?e:F(new c(e,r).toString()),a=o.length;for(s=0;s<n-t;++s)this[s+t]=o[s%a]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function j(e){return e<16?"0"+e.toString(16):e.toString(16)}function F(e,t){var n;t=t||1/0;for(var r=e.length,i=null,s=[],o=0;o<r;++o){if((n=e.charCodeAt(o))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&s.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&s.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return s}function q(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function W(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(7))},function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(13).Buffer)},function(e,t,n){"use strict";function r(e){return"function"==typeof e}n.d(t,"a",function(){return r})},function(e,t,n){var r=n(13),i=r.Buffer;function s(e,t){for(var n in e)t[n]=e[n]}function o(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(s(r,t),t.Buffer=o),s(i,o),o.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},o.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,r,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var s,o,a=arguments.length;switch(a){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,n)});case 3:return t.nextTick(function(){e.call(null,n,r)});case 4:return t.nextTick(function(){e.call(null,n,r,i)});default:for(s=new Array(a-1),o=0;o<s.length;)s[o++]=arguments[o];return t.nextTick(function(){e.apply(null,s)})}}}:e.exports=t}).call(this,n(6))},function(e,t,n){(function(t){e.exports=u;var r=n(32)("simple-peer"),i=n(35),s=n(10),o=n(36),a=n(37),c=5e3;function u(e){var t,n,r=this;if(!(r instanceof u))return new u(e);if(r._id=o(4).toString("hex").slice(0,7),r._debug("new peer %o",e),e=Object.assign({allowHalfOpen:!1},e),a.Duplex.call(r,e),r.channelName=e.initiator?e.channelName||o(20).toString("hex"):null,r._isChromium="undefined"!=typeof window&&!!window.webkitRTCPeerConnection,r.initiator=e.initiator||!1,r.channelConfig=e.channelConfig||u.channelConfig,r.config=e.config||u.config,r.constraints=r._transformConstraints(e.constraints||u.constraints),r.offerConstraints=r._transformConstraints(e.offerConstraints||{}),r.answerConstraints=r._transformConstraints(e.answerConstraints||{}),r.sdpTransform=e.sdpTransform||function(e){return e},r.streams=e.streams||(e.stream?[e.stream]:[]),r.trickle=void 0===e.trickle||e.trickle,r.allowHalfTrickle=void 0!==e.allowHalfTrickle&&e.allowHalfTrickle,r.iceCompleteTimeout=e.iceCompleteTimeout||c,r.destroyed=!1,r.connected=!1,r.remoteAddress=void 0,r.remoteFamily=void 0,r.remotePort=void 0,r.localAddress=void 0,r.localPort=void 0,r._wrtc=e.wrtc&&"object"==typeof e.wrtc?e.wrtc:i(),!r._wrtc)throw"undefined"==typeof window?l("No WebRTC support: Specify `opts.wrtc` option in this environment","ERR_WEBRTC_SUPPORT"):l("No WebRTC support: Not a supported browser","ERR_WEBRTC_SUPPORT");r._pcReady=!1,r._channelReady=!1,r._iceComplete=!1,r._iceCompleteTimer=null,r._channel=null,r._pendingCandidates=[],r._isNegotiating=!r.initiator,r._batchedNegotiation=!1,r._queuedNegotiation=!1,r._sendersAwaitingStable=[],r._senderMap=new WeakMap,r._firstStable=!0,r._closingInterval=null,r._remoteTracks=[],r._remoteStreams=[],r._chunk=null,r._cb=null,r._interval=null,r._pc=new r._wrtc.RTCPeerConnection(r.config,r.constraints),(r._isChromium||r._wrtc&&r._wrtc.electronDaemon)&&(t=r._wrtc.RTCPeerConnection,(n=r._pc).createOffer=function(e){return new Promise((n,r)=>{t.prototype.createOffer.call(this,n,r,e)})},n.createAnswer=function(e){return new Promise((n,r)=>{t.prototype.createAnswer.call(this,n,r,e)})},n.setLocalDescription=function(e){return new Promise((n,r)=>{t.prototype.setLocalDescription.call(this,e,n,r)})},n.setRemoteDescription=function(e){return new Promise((n,r)=>{t.prototype.setRemoteDescription.call(this,e,n,r)})}),r._isReactNativeWebrtc="number"==typeof r._pc._peerConnectionId,r._pc.oniceconnectionstatechange=function(){r._onIceStateChange()},r._pc.onicegatheringstatechange=function(){r._onIceStateChange()},r._pc.onsignalingstatechange=function(){r._onSignalingStateChange()},r._pc.onicecandidate=function(e){r._onIceCandidate(e)},r.initiator?r._setupData({channel:r._pc.createDataChannel(r.channelName,r.channelConfig)}):r._pc.ondatachannel=function(e){r._setupData(e)},"addTrack"in r._pc&&(r.streams&&r.streams.forEach(function(e){r.addStream(e)}),r._pc.ontrack=function(e){r._onTrack(e)}),r.initiator&&r._needsNegotiation(),r._onFinishBound=function(){r._onFinish()},r.once("finish",r._onFinishBound)}function h(e){return e.replace(/a=ice-options:trickle\s\n/g,"")}function l(e,t){var n=new Error(e);return n.code=t,n}function d(){}s(u,a.Duplex),u.WEBRTC_SUPPORT=!!i(),u.config={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:global.stun.twilio.com:3478?transport=udp"}]},u.constraints={},u.channelConfig={},Object.defineProperty(u.prototype,"bufferSize",{get:function(){return this._channel&&this._channel.bufferedAmount||0}}),u.prototype.address=function(){return{port:this.localPort,family:"IPv4",address:this.localAddress}},u.prototype.signal=function(e){var t=this;if(t.destroyed)throw l("cannot signal after peer is destroyed","ERR_SIGNALING");if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e={}}t._debug("signal()"),e.renegotiate&&t.initiator&&(t._debug("got request to renegotiate"),t._needsNegotiation()),e.candidate&&(t._pc.remoteDescription&&t._pc.remoteDescription.type?t._addIceCandidate(e.candidate):t._pendingCandidates.push(e.candidate)),e.sdp&&t._pc.setRemoteDescription(new t._wrtc.RTCSessionDescription(e)).then(function(){t.destroyed||(t._pendingCandidates.forEach(function(e){t._addIceCandidate(e)}),t._pendingCandidates=[],"offer"===t._pc.remoteDescription.type&&t._createAnswer())}).catch(function(e){t.destroy(l(e,"ERR_SET_REMOTE_DESCRIPTION"))}),e.sdp||e.candidate||e.renegotiate||t.destroy(l("signal() called with invalid signal data","ERR_SIGNALING"))},u.prototype._addIceCandidate=function(e){var t=this;try{t._pc.addIceCandidate(new t._wrtc.RTCIceCandidate(e),d,function(e){t.destroy(l(e,"ERR_ADD_ICE_CANDIDATE"))})}catch(e){t.destroy(l("error adding candidate: "+e.message,"ERR_ADD_ICE_CANDIDATE"))}},u.prototype.send=function(e){this._channel.send(e)},u.prototype.addStream=function(e){var t=this;t._debug("addStream()"),e.getTracks().forEach(function(n){t.addTrack(n,e)})},u.prototype.addTrack=function(e,t){this._debug("addTrack()");var n=this._pc.addTrack(e,t),r=this._senderMap.get(e)||new WeakMap;r.set(t,n),this._senderMap.set(e,r),this._needsNegotiation()},u.prototype.replaceTrack=async function(e,t,n){this._debug("replaceTrack()");var r=this._senderMap.get(e),i=r?r.get(n):null;i||this.destroy(new Error("Cannot replace track that was never added.")),t&&this._senderMap.set(t,r),null!=i.replaceTrack?await i.replaceTrack(t):this.destroy(l("replaceTrack is not supported in this browser","ERR_UNSUPPORTED_REPLACETRACK"))},u.prototype.removeTrack=function(e,t){this._debug("removeSender()");var n=this._senderMap.get(e),r=n?n.get(t):null;r||this.destroy(new Error("Cannot remove track that was never added."));try{this._pc.removeTrack(r)}catch(e){"NS_ERROR_UNEXPECTED"===e.name?this._sendersAwaitingStable.push(r):this.destroy(e)}},u.prototype.removeStream=function(e){var t=this;t._debug("removeSenders()"),e.getTracks().forEach(function(n){t.removeTrack(n,e)})},u.prototype._needsNegotiation=function(){var e=this;e._debug("_needsNegotiation"),e._batchedNegotiation||(e._batchedNegotiation=!0,setTimeout(function(){e._batchedNegotiation=!1,e._debug("starting batched negotiation"),e.negotiate()},0))},u.prototype.negotiate=function(){this.initiator?this._isNegotiating?(this._queuedNegotiation=!0,this._debug("already negotiating, queueing")):(this._debug("start negotiation"),this._createOffer()):this._isNegotiating||(this._debug("requesting negotiation from initiator"),this.emit("signal",{renegotiate:!0})),this._isNegotiating=!0},u.prototype.destroy=function(e){this._destroy(e,function(){})},u.prototype._destroy=function(e,t){if(!this.destroyed){if(this._debug("destroy (error: %s)",e&&(e.message||e)),this.readable=this.writable=!1,this._readableState.ended||this.push(null),this._writableState.finished||this.end(),this.destroyed=!0,this.connected=!1,this._pcReady=!1,this._channelReady=!1,this._remoteTracks=null,this._remoteStreams=null,this._senderMap=null,clearInterval(this._closingInterval),this._closingInterval=null,clearInterval(this._interval),this._interval=null,this._chunk=null,this._cb=null,this._onFinishBound&&this.removeListener("finish",this._onFinishBound),this._onFinishBound=null,this._channel){try{this._channel.close()}catch(e){}this._channel.onmessage=null,this._channel.onopen=null,this._channel.onclose=null,this._channel.onerror=null}if(this._pc){try{this._pc.close()}catch(e){}this._pc.oniceconnectionstatechange=null,this._pc.onicegatheringstatechange=null,this._pc.onsignalingstatechange=null,this._pc.onicecandidate=null,"addTrack"in this._pc&&(this._pc.ontrack=null),this._pc.ondatachannel=null}this._pc=null,this._channel=null,e&&this.emit("error",e),this.emit("close"),t()}},u.prototype._setupData=function(e){var t=this;if(!e.channel)return t.destroy(l("Data channel event is missing `channel` property","ERR_DATA_CHANNEL"));t._channel=e.channel,t._channel.binaryType="arraybuffer","number"==typeof t._channel.bufferedAmountLowThreshold&&(t._channel.bufferedAmountLowThreshold=65536),t.channelName=t._channel.label,t._channel.onmessage=function(e){t._onChannelMessage(e)},t._channel.onbufferedamountlow=function(){t._onChannelBufferedAmountLow()},t._channel.onopen=function(){t._onChannelOpen()},t._channel.onclose=function(){t._onChannelClose()},t._channel.onerror=function(e){t.destroy(l(e,"ERR_DATA_CHANNEL"))};var n=!1;t._closingInterval=setInterval(function(){t._channel&&"closing"===t._channel.readyState?(n&&t._onChannelClose(),n=!0):n=!1},5e3)},u.prototype._read=function(){},u.prototype._write=function(e,t,n){if(this.destroyed)return n(l("cannot write after peer is destroyed","ERR_DATA_CHANNEL"));if(this.connected){try{this.send(e)}catch(e){return this.destroy(l(e,"ERR_DATA_CHANNEL"))}this._channel.bufferedAmount>65536?(this._debug("start backpressure: bufferedAmount %d",this._channel.bufferedAmount),this._cb=n):n(null)}else this._debug("write before connect"),this._chunk=e,this._cb=n},u.prototype._onFinish=function(){var e=this;function t(){setTimeout(function(){e.destroy()},1e3)}e.destroyed||(e.connected?t():e.once("connect",t))},u.prototype._startIceCompleteTimeout=function(){r("started iceComplete timeout");var e=this;e.destroyed||e._iceCompleteTimer||(e._iceCompleteTimer=setTimeout(function(){e._iceComplete||(e._iceComplete=!0,e.emit("iceTimeout"),e.emit("_iceComplete"))},this.iceCompleteTimeout))},u.prototype._createOffer=function(){var e=this;e.destroyed||e._pc.createOffer(e.offerConstraints).then(function(t){function n(){if(!e.destroyed){var n=e._pc.localDescription||t;e._debug("signal"),e.emit("signal",{type:n.type,sdp:n.sdp})}}e.destroyed||(e.trickle||e.allowHalfTrickle||(t.sdp=h(t.sdp)),t.sdp=e.sdpTransform(t.sdp),e._pc.setLocalDescription(t).then(function(){if(e._debug("createOffer success"),e.destroyed)return;e.trickle||e._iceComplete?n():e.once("_iceComplete",n)}).catch(function(t){e.destroy(l(t,"ERR_SET_LOCAL_DESCRIPTION"))}))}).catch(function(t){e.destroy(l(t,"ERR_CREATE_OFFER"))})},u.prototype._createAnswer=function(){var e=this;e.destroyed||e._pc.createAnswer(e.answerConstraints).then(function(t){function n(){if(!e.destroyed){var n=e._pc.localDescription||t;e._debug("signal"),e.emit("signal",{type:n.type,sdp:n.sdp})}}e.destroyed||(e.trickle||e.allowHalfTrickle||(t.sdp=h(t.sdp)),t.sdp=e.sdpTransform(t.sdp),e._pc.setLocalDescription(t).then(function(){if(e.destroyed)return;e.trickle||e._iceComplete?n():e.once("_iceComplete",n)}).catch(function(t){e.destroy(l(t,"ERR_SET_LOCAL_DESCRIPTION"))}))}).catch(function(t){e.destroy(l(t,"ERR_CREATE_ANSWER"))})},u.prototype._onIceStateChange=function(){if(!this.destroyed){var e=this._pc.iceConnectionState,t=this._pc.iceGatheringState;this._debug("iceStateChange (connection: %s) (gathering: %s)",e,t),this.emit("iceStateChange",e,t),"connected"!==e&&"completed"!==e||(this._pcReady=!0,this._maybeReady()),"failed"===e&&this.destroy(l("Ice connection failed.","ERR_ICE_CONNECTION_FAILURE")),"closed"===e&&this.destroy(new Error("Ice connection closed."))}},u.prototype.getStats=function(e){var t=this;0===t._pc.getStats.length?t._pc.getStats().then(function(t){var n=[];t.forEach(function(e){n.push(e)}),e(null,n)},function(t){e(t)}):t._isReactNativeWebrtc?t._pc.getStats(null,function(t){var n=[];t.forEach(function(e){n.push(e)}),e(null,n)},function(t){e(t)}):t._pc.getStats.length>0?t._pc.getStats(function(n){if(!t.destroyed){var r=[];n.result().forEach(function(e){var t={};e.names().forEach(function(n){t[n]=e.stat(n)}),t.id=e.id,t.type=e.type,t.timestamp=e.timestamp,r.push(t)}),e(null,r)}},function(t){e(t)}):e(null,[])},u.prototype._maybeReady=function(){var e=this;e._debug("maybeReady pc %s channel %s",e._pcReady,e._channelReady),!e.connected&&!e._connecting&&e._pcReady&&e._channelReady&&(e._connecting=!0,function t(){e.destroyed||e.getStats(function(n,r){if(!e.destroyed){n&&(r=[]);var i={},s={},o={},a=!1;if(r.forEach(function(e){"remotecandidate"!==e.type&&"remote-candidate"!==e.type||(i[e.id]=e),"localcandidate"!==e.type&&"local-candidate"!==e.type||(s[e.id]=e),"candidatepair"!==e.type&&"candidate-pair"!==e.type||(o[e.id]=e)}),r.forEach(function(e){"transport"===e.type&&e.selectedCandidatePairId&&u(o[e.selectedCandidatePairId]),("googCandidatePair"===e.type&&"true"===e.googActiveConnection||("candidatepair"===e.type||"candidate-pair"===e.type)&&e.selected)&&u(e)}),a||Object.keys(o).length&&!Object.keys(s).length){if(e._connecting=!1,e.connected=!0,e._chunk){try{e.send(e._chunk)}catch(n){return e.destroy(l(n,"ERR_DATA_CHANNEL"))}e._chunk=null,e._debug('sent chunk from "write before connect"');var c=e._cb;e._cb=null,c(null)}"number"!=typeof e._channel.bufferedAmountLowThreshold&&(e._interval=setInterval(function(){e._onInterval()},150),e._interval.unref&&e._interval.unref()),e._debug("connect"),e.emit("connect")}else setTimeout(t,100)}function u(t){a=!0;var n=s[t.localCandidateId];n&&n.ip?(e.localAddress=n.ip,e.localPort=Number(n.port)):n&&n.ipAddress?(e.localAddress=n.ipAddress,e.localPort=Number(n.portNumber)):"string"==typeof t.googLocalAddress&&(n=t.googLocalAddress.split(":"),e.localAddress=n[0],e.localPort=Number(n[1]));var r=i[t.remoteCandidateId];r&&r.ip?(e.remoteAddress=r.ip,e.remotePort=Number(r.port)):r&&r.ipAddress?(e.remoteAddress=r.ipAddress,e.remotePort=Number(r.portNumber)):"string"==typeof t.googRemoteAddress&&(r=t.googRemoteAddress.split(":"),e.remoteAddress=r[0],e.remotePort=Number(r[1])),e.remoteFamily="IPv4",e._debug("connect local: %s:%s remote: %s:%s",e.localAddress,e.localPort,e.remoteAddress,e.remotePort)}})}())},u.prototype._onInterval=function(){!this._cb||!this._channel||this._channel.bufferedAmount>65536||this._onChannelBufferedAmountLow()},u.prototype._onSignalingStateChange=function(){var e=this;e.destroyed||("stable"!==e._pc.signalingState||e._firstStable||(e._isNegotiating=!1,e._debug("flushing sender queue",e._sendersAwaitingStable),e._sendersAwaitingStable.forEach(function(t){e._pc.removeTrack(t),e._queuedNegotiation=!0}),e._sendersAwaitingStable=[],e._queuedNegotiation&&(e._debug("flushing negotiation queue"),e._queuedNegotiation=!1,e._needsNegotiation()),e._debug("negotiate"),e.emit("negotiate")),e._firstStable=!1,e._debug("signalingStateChange %s",e._pc.signalingState),e.emit("signalingStateChange",e._pc.signalingState))},u.prototype._onIceCandidate=function(e){this.destroyed||(e.candidate&&this.trickle?this.emit("signal",{candidate:{candidate:e.candidate.candidate,sdpMLineIndex:e.candidate.sdpMLineIndex,sdpMid:e.candidate.sdpMid}}):e.candidate||this._iceComplete||(this._iceComplete=!0,this.emit("_iceComplete")),e.candidate&&this._startIceCompleteTimeout())},u.prototype._onChannelMessage=function(e){if(!this.destroyed){var n=e.data;n instanceof ArrayBuffer&&(n=t.from(n)),this.push(n)}},u.prototype._onChannelBufferedAmountLow=function(){if(!this.destroyed&&this._cb){this._debug("ending backpressure: bufferedAmount %d",this._channel.bufferedAmount);var e=this._cb;this._cb=null,e(null)}},u.prototype._onChannelOpen=function(){this.connected||this.destroyed||(this._debug("on channel open"),this._channelReady=!0,this._maybeReady())},u.prototype._onChannelClose=function(){this.destroyed||(this._debug("on channel close"),this.destroy())},u.prototype._onTrack=function(e){var t=this;t.destroyed||e.streams.forEach(function(n){t._debug("on track"),t.emit("track",e.track,n),t._remoteTracks.push({track:e.track,stream:n}),t._remoteStreams.some(function(e){return e.id===n.id})||(t._remoteStreams.push(n),setTimeout(function(){t.emit("stream",n)},0))})},u.prototype.setConstraints=function(e){this.initiator?this.offerConstraints=this._transformConstraints(e):this.answerConstraints=this._transformConstraints(e)},u.prototype._debug=function(){var e=[].slice.call(arguments);e[0]="["+this._id+"] "+e[0],r.apply(null,e)},u.prototype._transformConstraints=function(e){if(0===Object.keys(e).length)return e;if((e.mandatory||e.optional)&&!this._isChromium){var t=Object.assign({},e.optional,e.mandatory);return void 0!==t.OfferToReceiveVideo&&(t.offerToReceiveVideo=t.OfferToReceiveVideo,delete t.OfferToReceiveVideo),void 0!==t.OfferToReceiveAudio&&(t.offerToReceiveAudio=t.OfferToReceiveAudio,delete t.OfferToReceiveAudio),t}return e.mandatory||e.optional||!this._isChromium?e:(void 0!==e.offerToReceiveVideo&&(e.OfferToReceiveVideo=e.offerToReceiveVideo,delete e.offerToReceiveVideo),void 0!==e.offerToReceiveAudio&&(e.OfferToReceiveAudio=e.offerToReceiveAudio,delete e.offerToReceiveAudio),{mandatory:e})}}).call(this,n(13).Buffer)},function(e,t,n){"use strict";(function(t,r){var i=n(17);e.exports=m;var s,o=n(38);m.ReadableState=b;n(20).EventEmitter;var a=function(e,t){return e.listeners(t).length},c=n(21),u=n(16).Buffer,h=t.Uint8Array||function(){};var l=n(14);l.inherits=n(10);var d=n(39),f=void 0;f=d&&d.debuglog?d.debuglog("stream"):function(){};var g,p=n(40),_=n(22);l.inherits(m,c);var y=["error","close","destroy","pause","resume"];function b(e,t){e=e||{};var r=t instanceof(s=s||n(11));this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,o=e.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(o||0===o)?o:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(g||(g=n(24).StringDecoder),this.decoder=new g(e.encoding),this.encoding=e.encoding)}function m(e){if(s=s||n(11),!(this instanceof m))return new m(e);this._readableState=new b(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),c.call(this)}function v(e,t,n,r,i){var s,o=e._readableState;null===t?(o.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,w(e)}(e,o)):(i||(s=function(e,t){var n;r=t,u.isBuffer(r)||r instanceof h||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var r;return n}(o,t)),s?e.emit("error",s):o.objectMode||t&&t.length>0?("string"==typeof t||o.objectMode||Object.getPrototypeOf(t)===u.prototype||(t=function(e){return u.from(e)}(t)),r?o.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):E(e,o,t,!0):o.ended?e.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!n?(t=o.decoder.write(t),o.objectMode||0!==t.length?E(e,o,t,!1):T(e,o)):E(e,o,t,!1))):r||(o.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(o)}function E(e,t,n,r){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,r?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&w(e)),T(e,t)}Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),m.prototype.destroy=_.destroy,m.prototype._undestroy=_.undestroy,m.prototype._destroy=function(e,t){this.push(null),t(e)},m.prototype.push=function(e,t){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof e&&((t=t||r.defaultEncoding)!==r.encoding&&(e=u.from(e,t),t=""),n=!0),v(this,e,t,!1,n)},m.prototype.unshift=function(e){return v(this,e,null,!0,!1)},m.prototype.isPaused=function(){return!1===this._readableState.flowing},m.prototype.setEncoding=function(e){return g||(g=n(24).StringDecoder),this._readableState.decoder=new g(e),this._readableState.encoding=e,this};var C=8388608;function S(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=C?e=C:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function w(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(f("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(I,e):I(e))}function I(e){f("emit readable"),e.emit("readable"),O(e)}function T(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(R,e,t))}function R(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(f("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function A(e){f("readable nexttick read 0"),e.read(0)}function P(e,t){t.reading||(f("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),O(e),t.flowing&&!t.reading&&e.read(0)}function O(e){var t=e._readableState;for(f("flow",t.flowing);t.flowing&&null!==e.read(););}function M(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var r;e<t.head.data.length?(r=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):r=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,r=1,i=n.data;e-=i.length;for(;n=n.next;){var s=n.data,o=e>s.length?s.length:e;if(o===s.length?i+=s:i+=s.slice(0,e),0===(e-=o)){o===s.length?(++r,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=s.slice(o));break}++r}return t.length-=r,i}(e,t):function(e,t){var n=u.allocUnsafe(e),r=t.head,i=1;r.data.copy(n),e-=r.data.length;for(;r=r.next;){var s=r.data,o=e>s.length?s.length:e;if(s.copy(n,n.length-e,0,o),0===(e-=o)){o===s.length?(++i,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=s.slice(o));break}++i}return t.length-=i,n}(e,t);return r}(e,t.buffer,t.decoder),n);var n}function N(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(L,t,e))}function L(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function k(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}m.prototype.read=function(e){f("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return f("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?N(this):w(this),null;if(0===(e=S(e,t))&&t.ended)return 0===t.length&&N(this),null;var r,i=t.needReadable;return f("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&f("length less than watermark",i=!0),t.ended||t.reading?f("reading or ended",i=!1):i&&(f("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=S(n,t))),null===(r=e>0?M(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&N(this)),null!==r&&this.emit("data",r),r},m.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},m.prototype.pipe=function(e,t){var n=this,s=this._readableState;switch(s.pipesCount){case 0:s.pipes=e;break;case 1:s.pipes=[s.pipes,e];break;default:s.pipes.push(e)}s.pipesCount+=1,f("pipe count=%d opts=%j",s.pipesCount,t);var c=(!t||!1!==t.end)&&e!==r.stdout&&e!==r.stderr?h:m;function u(t,r){f("onunpipe"),t===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,f("cleanup"),e.removeListener("close",y),e.removeListener("finish",b),e.removeListener("drain",l),e.removeListener("error",_),e.removeListener("unpipe",u),n.removeListener("end",h),n.removeListener("end",m),n.removeListener("data",p),d=!0,!s.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}function h(){f("onend"),e.end()}s.endEmitted?i.nextTick(c):n.once("end",c),e.on("unpipe",u);var l=function(e){return function(){var t=e._readableState;f("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,O(e))}}(n);e.on("drain",l);var d=!1;var g=!1;function p(t){f("ondata"),g=!1,!1!==e.write(t)||g||((1===s.pipesCount&&s.pipes===e||s.pipesCount>1&&-1!==k(s.pipes,e))&&!d&&(f("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,g=!0),n.pause())}function _(t){f("onerror",t),m(),e.removeListener("error",_),0===a(e,"error")&&e.emit("error",t)}function y(){e.removeListener("finish",b),m()}function b(){f("onfinish"),e.removeListener("close",y),m()}function m(){f("unpipe"),n.unpipe(e)}return n.on("data",p),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?o(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",_),e.once("close",y),e.once("finish",b),e.emit("pipe",n),s.flowing||(f("pipe resume"),n.resume()),e},m.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n),this);if(!e){var r=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var s=0;s<i;s++)r[s].emit("unpipe",this,n);return this}var o=k(t.pipes,e);return-1===o?this:(t.pipes.splice(o,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n),this)},m.prototype.on=function(e,t){var n=c.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&w(this):i.nextTick(A,this))}return n},m.prototype.addListener=m.prototype.on,m.prototype.resume=function(){var e=this._readableState;return e.flowing||(f("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(P,e,t))}(this,e)),this},m.prototype.pause=function(){return f("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(f("pause"),this._readableState.flowing=!1,this.emit("pause")),this},m.prototype.wrap=function(e){var t=this,n=this._readableState,r=!1;for(var i in e.on("end",function(){if(f("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(i){(f("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(t.push(i)||(r=!0,e.pause()))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var s=0;s<y.length;s++)e.on(y[s],this.emit.bind(this,y[s]));return this._read=function(t){f("wrapped _read",t),r&&(r=!1,e.resume())},this},Object.defineProperty(m.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),m._fromList=M}).call(this,n(7),n(6))},function(e,t,n){"use strict";var r,i="object"==typeof Reflect?Reflect:null,s=i&&"function"==typeof i.apply?i.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};r=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var c=10;function u(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function h(e,t,n,r){var i,s,o,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(s=e._events)?(s=e._events=Object.create(null),e._eventsCount=0):(void 0!==s.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),s=e._events),o=s[t]),void 0===o)o=s[t]=n,++e._eventsCount;else if("function"==typeof o?o=s[t]=r?[n,o]:[o,n]:r?o.unshift(n):o.push(n),(i=u(e))>0&&o.length>i&&!o.warned){o.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,a=c,console&&console.warn&&console.warn(a)}return e}function l(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,s(this.listener,this.target,e))}.bind(r);return i.listener=n,r.wrapFn=i,i}function d(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):g(i,i.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function g(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return u(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=i[e];if(void 0===c)return!1;if("function"==typeof c)s(c,this,t);else{var u=c.length,h=g(c,u);for(n=0;n<u;++n)s(h[n],this,t)}return!0},a.prototype.addListener=function(e,t){return h(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return h(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,l(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,l(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,r,i,s,o;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(i=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){o=n[s].listener,i=s;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,o||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,s=Object.keys(n);for(r=0;r<s.length;++r)"removeListener"!==(i=s[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(e,t,n){e.exports=n(20).EventEmitter},function(e,t,n){"use strict";var r=n(17);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,s=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return s||o?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(r.nextTick(i,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){"use strict";(function(t,r,i){var s=n(17);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var r=e.entry;e.entry=null;for(;r;){var i=r.callback;t.pendingcb--,i(n),r=r.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=b;var a,c=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?r:s.nextTick;b.WritableState=y;var u=n(14);u.inherits=n(10);var h={deprecate:n(44)},l=n(21),d=n(16).Buffer,f=i.Uint8Array||function(){};var g,p=n(22);function _(){}function y(e,t){a=a||n(11),e=e||{};var r=t instanceof a;this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,u=e.writableHighWaterMark,h=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(u||0===u)?u:h,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===e.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,r=n.sync,i=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,r,i){--t.pendingcb,n?(s.nextTick(i,r),s.nextTick(w,e,t),e._writableState.errorEmitted=!0,e.emit("error",r)):(i(r),e._writableState.errorEmitted=!0,e.emit("error",r),w(e,t))}(e,n,r,t,i);else{var o=C(n);o||n.corked||n.bufferProcessing||!n.bufferedRequest||E(e,n),r?c(v,e,n,o,i):v(e,n,o,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function b(e){if(a=a||n(11),!(g.call(b,this)||this instanceof a))return new b(e);this._writableState=new y(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),l.call(this)}function m(e,t,n,r,i,s,o){t.writelen=r,t.writecb=o,t.writing=!0,t.sync=!0,n?e._writev(i,t.onwrite):e._write(i,s,t.onwrite),t.sync=!1}function v(e,t,n,r){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,r(),w(e,t)}function E(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var r=t.bufferedRequestCount,i=new Array(r),s=t.corkedRequestsFree;s.entry=n;for(var a=0,c=!0;n;)i[a]=n,n.isBuf||(c=!1),n=n.next,a+=1;i.allBuffers=c,m(e,t,!0,t.length,i,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,s.next?(t.corkedRequestsFree=s.next,s.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;n;){var u=n.chunk,h=n.encoding,l=n.callback;if(m(e,t,!1,t.objectMode?1:u.length,u,h,l),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function C(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function S(e,t){e._final(function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),w(e,t)})}function w(e,t){var n=C(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,s.nextTick(S,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}u.inherits(b,l),y.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(y.prototype,"buffer",{get:h.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(g=Function.prototype[Symbol.hasInstance],Object.defineProperty(b,Symbol.hasInstance,{value:function(e){return!!g.call(this,e)||this===b&&(e&&e._writableState instanceof y)}})):g=function(e){return e instanceof this},b.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},b.prototype.write=function(e,t,n){var r,i=this._writableState,o=!1,a=!i.objectMode&&(r=e,d.isBuffer(r)||r instanceof f);return a&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(n=t,t=null),a?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof n&&(n=_),i.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),s.nextTick(t,n)}(this,n):(a||function(e,t,n,r){var i=!0,o=!1;return null===n?o=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),s.nextTick(r,o),i=!1),i}(this,i,e,n))&&(i.pendingcb++,o=function(e,t,n,r,i,s){if(!n){var o=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,n));return t}(t,r,i);r!==o&&(n=!0,i="buffer",r=o)}var a=t.objectMode?1:r.length;t.length+=a;var c=t.length<t.highWaterMark;c||(t.needDrain=!0);if(t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:s,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else m(e,t,!1,a,r,i,s);return c}(this,i,a,e,t,n)),o},b.prototype.cork=function(){this._writableState.corked++},b.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||E(this,e))},b.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(b.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),b.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},b.prototype._writev=null,b.prototype.end=function(e,t,n){var r=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(e,t,n){t.ending=!0,w(e,t),n&&(t.finished?s.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,r,n)},Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),b.prototype.destroy=p.destroy,b.prototype._undestroy=p.undestroy,b.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(6),n(42).setImmediate,n(7))},function(e,t,n){"use strict";var r=n(45).Buffer,i=r.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function s(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(r.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=c,this.end=u,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=h,this.end=l,t=3;break;default:return this.write=d,void(this.end=f)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function c(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function u(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function h(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function l(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function f(e){return e&&e.length?this.write(e):""}t.StringDecoder=s,s.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},s.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},s.prototype.text=function(e,t){var n=function(e,t,n){var r=t.length-1;if(r<n)return 0;var i=o(t[r]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=o(t[r]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=o(t[r]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var r=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,r),e.toString("utf8",t,r)},s.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){"use strict";e.exports=o;var r=n(11),i=n(14);function s(e,t){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),r(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function o(e){if(!(this instanceof o))return new o(e);r.call(this,e),this._transformState={afterTransform:s.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",a)}function a(){var e=this;"function"==typeof this._flush?this._flush(function(t,n){c(e,t,n)}):c(this,null,null)}function c(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=n(10),i.inherits(o,r),o.prototype.push=function(e,t){return this._transformState.needTransform=!1,r.prototype.push.call(this,e,t)},o.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,t,n){var r=this._transformState;if(r.writecb=n,r.writechunk=e,r.writeencoding=t,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},o.prototype._destroy=function(e,t){var n=this;r.prototype._destroy.call(this,e,function(e){t(e),n.emit("close")})}},function(e,t,n){"use strict";(function(e,r){n.d(t,"a",function(){return xe});var i,s,o,a,c,u,h=n(0),l=n(5),d=n(18);class f{constructor(){this._maxCancelId=Number.MAX_SAFE_INTEGER-10,this._lastCancelId=0,this._tickCounter=0,this._isRunning=!1,this._intervals=[],this._timeouts=[]}doTick(){this._timeouts.forEach(e=>{e.tick===this._tickCounter&&e.callback()}),this._intervals.forEach(e=>{this._tickCounter%e.tick==0&&e.callback()}),this._timeouts=this._timeouts.filter(e=>e.tick>this._tickCounter)}tick(){try{this.doTick()}catch(e){throw e}finally{this._tickCounter++}}start(){this._isRunning=!0,this.startClock()}pause(){this._isRunning=!1,this.pauseClock()}stop(){this.pause(),this._intervals.length=0,this._timeouts.length=0,this._tickCounter=0}forward(e){for(;this._tickCounter<e;)this.tick()}rewind(){this._tickCounter=0,this._timeouts.length=0}setInterval(e,t=1){t=Math.floor(Math.max(t,1)),this._lastCancelId=(this._lastCancelId+1)%this._maxCancelId;const n={tick:t,cancelId:this._lastCancelId,callback:e};return this._intervals.push(n),this._lastCancelId}clearInterval(e){this._intervals=this._intervals.filter(t=>t.cancelId!==e)}setTimeout(e,t=1){t=Math.floor(Math.max(t,1)),this._lastCancelId=(this._lastCancelId+1)%this._maxCancelId;const n={tick:this._tickCounter+t,cancelId:this._lastCancelId,callback:e};return this._timeouts.push(n),this._lastCancelId}clearTimeout(e){this._timeouts=this._timeouts.filter(t=>t.cancelId!==e)}getTick(){return this._tickCounter}isRunning(){return this._isRunning}timeIt(){const e=this.getPrecisionTimestamp();return()=>this.getPrecisionTimestamp()-e}}class g extends f{constructor(e){super(),this._masterClock=e}fork(){const e=new g(this);return e.start(),e}setSpeed(e){this.pauseClock(),this.startClock(e)}getPrecisionTimestamp(){return this._masterClock.getPrecisionTimestamp()}startClock(e){this._cancelId=this._masterClock.setInterval(this.tick.bind(this),e)}pauseClock(){this._masterClock.clearInterval(this._cancelId),this._cancelId=null}}class p extends f{constructor(e=1e3){super(),this._speed=e}fork(){const e=new g(this);return e.start(),e}setSpeed(e){this._speed=e,this.isRunning()&&(this.pauseClock(),this.startClock())}startClock(e){e&&(this._speed=e),this._masterCancelId=setInterval(this.tick.bind(this),this._speed)}getPrecisionTimestamp(){return performance&&"function"==typeof performance.now?performance.now():Date&&"function"==typeof Date.now?Date.now():this.getTick()}pauseClock(){clearInterval(this._masterCancelId)}getSpeed(){return this._speed}}!function(e){e.WEBSOCKET_UNSECURE="ws",e.WEBSOCKET="wss",e.WEBRTC_DATA="webrtc-data",e.WEBRTC_STREAM="webrtc-stream",e.VIA="via",e.VIA_MULTI="via-multi"}(i||(i={})),function(e){e.OPENING="opening",e.OPEN="open",e.CLOSING="closing",e.CLOSED="closed",e.ERROR="error"}(s||(s={})),function(e){e[e.INITIALIZING=0]="INITIALIZING",e[e.WAITING_FOR_OFFER=10]="WAITING_FOR_OFFER",e[e.WAITING_FOR_ANSWER=20]="WAITING_FOR_ANSWER",e[e.WAITING_FOR_ESTABLISH=30]="WAITING_FOR_ESTABLISH",e[e.ESTABLISHED=40]="ESTABLISHED"}(o||(o={}));class _{constructor(){[this._publicKey,this._privateKey]=this._generateKeyPair()}getPublicKey(){return this._publicKey}}class y extends _{_generateKeyPair(){return"public,private".split(",")}decrypt(e){return e}encrypt(e,t){return e}sign(e){return e}verify(e){return!0}}!function(e){e.ADDED="added",e.REMOVED="removed"}(a||(a={})),function(e){e[e.LOG=0]="LOG",e[e.DEBUG=10]="DEBUG",e[e.INFO=20]="INFO",e[e.WARN=30]="WARN",e[e.ERROR=40]="ERROR",e[e.FATAL=50]="FATAL"}(c||(c={}));class b{constructor(e){this._logLevel=null,this._id=e,this._logSubject=new h.a}static getLogger(e){return b._loggerMap.has(e)||b._loggerMap.set(e,new b(e)),b._loggerMap.get(e)}static setLevel(e){b._logLevel=e}static setVerbose(e){this._verbose=e}doLog(e,t,n,r){let i=0,s="";if(this._clock&&(i=this._clock.getTick(),s=`${this._clock.getTick()}:`),this.getLevel()<=e){const e=`${n} [${s}${this._id}]`;b._verbose||(r=r.slice(0,1)),t(e,...r)}this._logSubject.next({level:e,data:r.map(String),tick:i})}setClock(e){this._clock=e}getLevel(){return this._logLevel||b._logLevel}setLevel(e){this._logLevel=e}log(...e){this.doLog(c.LOG,console.log,"📠",e)}debug(...e){this.doLog(c.DEBUG,console.log,"🔧",e)}info(...e){this.doLog(c.INFO,console.info,"📬",e)}warn(...e){this.doLog(c.WARN,console.warn,"🚧",e)}error(...e){this.doLog(c.ERROR,console.error,"🚨",e)}fatal(...e){this.doLog(c.FATAL,console.error,"💣",e)}observeLogEvents(){return this._logSubject}}b._loggerMap=new Map,b._logLevel=c.DEBUG,b._verbose=!0;class m{constructor(e,t,n,r="v1"){this._id=e,this._protocol=t,this._location=n,this._version=r}static fromString(e){const t=e.split("/"),[n,r,i]=t.slice(1,4),s=t.slice(4).join("/");return new m(r,i,s,n)}getId(){return this._id}getProtocol(){return this._protocol}getLocation(){return this._location}setLocation(e){this._location=e}getVersion(){return this._version}isProtocol(...e){return-1!==e.indexOf(this._protocol)}toString(){return["mitosis",this.getVersion(),this.getId(),this.getProtocol(),this.getLocation()].filter(e=>void 0!==e).join("/")}}class v extends Map{constructor(e){super(),this._factory=e,this._default=e()}get(e){return this.has(e)||this.set(e,this._factory()),super.get(e)}getDefault(){return this._default}}!function(e){e.INTRODUCTION="introduction",e.PEER_UPDATE="peer-update",e.PEER_SUGGESTION="peer-suggestion",e.ROLE_UPDATE="role-update",e.CONNECTION_NEGOTIATION="connection-negotiation",e.CHANNEL_ANNOUNCEMENT="channel-announcement",e.APP_CONTENT="app-content",e.UNKNOWN_PEER="unknown-peer",e.PING="ping",e.PONG="pong",e.ROUTER_ALIVE="router-alive",e.PEER_ALIVE="peer-alive"}(u||(u={}));const E=new v(()=>1);E.set(u.PEER_UPDATE,1),E.set(u.PEER_SUGGESTION,10),E.set(u.APP_CONTENT,16),E.set(u.CONNECTION_NEGOTIATION,20),E.set(u.ROUTER_ALIVE,20),E.set(u.PEER_ALIVE,20);class C{constructor(e,t,n,r,i,s){this._sender=e,this._receiver=t,this._subject=n,this._body=r,this._id=i||`m${Math.round(1e3+8999*Math.random())}`,this._ttl=Number.isInteger(s)?s:E.get(n)}static fromString(e){const t=JSON.parse(e);return new C(m.fromString(t.sender),m.fromString(t.receiver),t.subject,t.body,t.id,t.ttl)}get length(){return t=this.toString(),e.browser?new Blob([t]).size:r.byteLength(t);var t}getReceiver(){return this._receiver}getSender(){return this._sender}getInboundAddress(){return this._inboundAddress}getSubject(){return this._subject}getBody(){return this._body}getId(){return this._id}getTtl(){return this._ttl}decreaseTtl(){return--this._ttl}setInboundAddress(e){this._inboundAddress=e}clone(){return new C(this._sender,this._receiver,this._subject,this._body,this._id,this._ttl)}toString(){return JSON.stringify({id:this._id,receiver:this.getReceiver().toString(),sender:this.getSender().toString(),subject:this.getSubject(),ttl:this.getTtl(),body:this.getBody()},void 0,2)}}class S extends C{constructor(e,t,n){super(e,t,u.APP_CONTENT,n)}getBody(){return this._body}}var w,I;!function(e){e.NEWBIE="newbie",e.PEER="peer",e.ROUTER="router",e.SIGNAL="signal"}(w||(w={})),function(e){e[e.CLEAN=30]="CLEAN",e[e.ACQUIRE=20]="ACQUIRE",e[e.PUBLISH=10]="PUBLISH"}(I||(I={}));const T=new Map;T.set(w.NEWBIE,10),T.set(w.PEER,20),T.set(w.ROUTER,30),T.set(w.SIGNAL,40);class R{constructor(){this.BROADCAST_ADDRESS="*",this.DEFAULT_SIGNAL_ADDRESS="mitosis/v1/p000/wss/signal.mitosis.dev/websocket",this.DIRECT_CONNECTIONS_GOAL_MIN=4,this.DIRECT_CONNECTIONS_GOAL_MAX=6,this.DIRECT_CONNECTIONS_MAX=10,this.TRY_OTHER_PEERS_COUNT=0,this.DIRECT_CONNECTION_BOOST_AMOUNT=2,this.DIRECT_CONNECTION_BOOST_TIMEOUT=20,this.SLIDING_WINDOW_SIZE=12,this.TRANSMISSION_PING_INTERVAL=4,this.MAX_ROUTERS_PER_SIGNAL=1,this.LAST_SEEN_TIMEOUT=30,this.LATENCY_WINDOW_SIZE=10,this.DEFAULT_QUALITY=.5,this.DEFAULT_ROUTER_RANK=.1,this.CONNECTION_METER_OPEN_GRACE_PERIOD_TIME=10,this.CONNECTION_METER_PROTECTION_TIME=10,this.CONNECTION_METER_PUNISHMENT_TIME=20,this.OUTBOUND_STREAM_CONNECTIONS=2,this.ROUTER_ALIVE_HIGHSCORE_WINDOW_SIZE=10}}const A=new v(()=>new R);A.get(w.SIGNAL).DIRECT_CONNECTIONS_MAX=100;class P extends Set{constructor(){super(...arguments),this._sequence=0}removeOutDated(){const e=this.values();let t=e.next();for(;!t.done;){const n=t.value;this.isSequenceOutOfWindow(n)&&this.delete(n),t=e.next()}}nextSequence(){this._sequence=this._sequence+1}isSequenceOutOfWindow(e){return null==this._sequence||(e>this._sequence||e<=this._sequence-A.getDefault().SLIDING_WINDOW_SIZE)}add(e){return this.setSequence(e),super.add(e),this}slide(){this.nextSequence(),this.removeOutDated()}setSequence(e){this.isSequenceOutOfWindow(e)&&(this._sequence=e),this.removeOutDated()}getSequenceNumber(){return this._sequence}}class O{constructor(e){this._peerManager=e,this._slidingWindow=new P}isDirectPeerMessage(e){return e.getSender().getId()===e.getInboundAddress().getId()}slidingWindowSayYes(e){return this._slidingWindow.isSequenceOutOfWindow(e.getBody().sequence)}canForwardMessage(e){return!!this.isDirectPeerMessage(e)||this.slidingWindowSayYes(e)}isFirstMessage(e){return this.slidingWindowSayYes(e)}floodMessage(e){if(this.canForwardMessage(e))b.getLogger(this._peerManager.getMyId()).debug("broadcast message",e.getInboundAddress(),e,this._slidingWindow.getSequenceNumber(),this._slidingWindow.isSequenceOutOfWindow(e.getBody().sequence)),this._peerManager.sendMessage(e),this._slidingWindow.add(e.getBody().sequence);else{const t=this._slidingWindow.isSequenceOutOfWindow(e.getBody().sequence);b.getLogger(this._peerManager.getMyId()).info("drop broadcast message",e,`inbound address ${e.getInboundAddress()}`,`sliding window sequence ${this._slidingWindow.getSequenceNumber()}`,`out of window ${t?"yes":"no"}`)}}}class M extends C{constructor(e,t,n){super(e,t,u.UNKNOWN_PEER,n)}getBody(){return this._body}}class N{constructor(e,t,n){this._peerManager=e,this.listenOnPeerChurn(),this._roleManager=t,this._streamManager=n,this._appContentMessagesSubject=new h.a,this._messagesSubject=new h.a,this._incomingMessageSubject=new h.a,this._routerAliveFloodingHandler=new O(e)}listenOnPeerChurn(){this._peerManager.observePeerChurn().pipe(Object(l.a)(e=>e.type===a.ADDED)).subscribe(e=>this.listenOnConnectionChurn(e.peer))}listenOnConnectionChurn(e){b.getLogger(this._peerManager.getMyId()).info(`added ${e.getId()}`),e.observeChurn().pipe(Object(l.a)(e=>e.type===a.ADDED)).subscribe(e=>this.listenOnConnectionAdded(e.connection))}listenOnConnectionAdded(e){e.observeMessageReceived().subscribe(t=>{this.handleMessage(t,e)})}handleMessage(e,t){try{e.setInboundAddress(t.getAddress()),this._incomingMessageSubject.next(e);const n=e.getInboundAddress().getId(),r=e.getSender().getId();b.getLogger(this._peerManager.getMyId()).warn(`ensure connection to ${r} via ${n}`),this._peerManager.ensureConnection(new m(r,i.VIA_MULTI,n)).catch(t=>b.getLogger(this._peerManager.getMyId()).warn(t,e)),e.getReceiver().getId()===this._peerManager.getMyId()?this.receiveMessage(e):e.getReceiver().getId()===A.getDefault().BROADCAST_ADDRESS?(this.receiveMessage(e),this.broadcastMessage(e)):this.forwardMessage(e)}catch(t){throw b.getLogger(e.getReceiver().getId()).error(t.message,t),t}}receiveMessage(e){const t=e.getInboundAddress().getId();switch(e.getSubject()){case u.ROLE_UPDATE:this._roleManager.updateRoles(e);break;case u.PEER_UPDATE:this._peerManager.updatePeers(e,t);break;case u.PEER_SUGGESTION:this._peerManager.updateSuggestedPeers(e,t);break;case u.UNKNOWN_PEER:const n=this._peerManager.getPeerById(e.getBody());n&&n.getConnectionTable().filterByLocation(e.getInboundAddress().getId()).forEach(e=>e.close());break;case u.CONNECTION_NEGOTIATION:switch(e.getSender().getProtocol()){case i.WEBRTC_STREAM:this._streamManager.negotiateConnection(e);break;default:this._peerManager.negotiateConnection(e)}break;case u.APP_CONTENT:this._appContentMessagesSubject.next(e);break;case u.INTRODUCTION:break;case u.ROUTER_ALIVE:const r=e,s=this._routerAliveFloodingHandler.isFirstMessage(r);this._peerManager.handleRouterAlive(r,s);break;case u.PEER_ALIVE:this._roleManager.hasRole(w.ROUTER)||b.getLogger(this._peerManager.getMyId()).warn("i am not a router",e);break;case u.CHANNEL_ANNOUNCEMENT:this._streamManager.updateProviders(e.getBody());break;default:throw new Error(`unsupported subject ${e.getSubject()}`)}this._messagesSubject.next(e)}broadcastMessage(e){switch(e.getSubject()){case u.ROUTER_ALIVE:this._routerAliveFloodingHandler.floodMessage(e);break;default:throw new Error(`message from type ${e.getSubject()} can not be broadcasted`)}}forwardMessage(e){const t=e.getReceiver().getId();if(!this._peerManager.getPeerById(t)){const n=e.getInboundAddress();b.getLogger(this._peerManager.getMyId()).debug(`telling ${n.getId()} that i don't know ${t}`,e),this._peerManager.sendMessage(new M(e.getReceiver(),e.getInboundAddress(),t))}this._peerManager.sendMessage(e)}observeAppContentMessages(){return this._appContentMessagesSubject}observeMessages(){return this._messagesSubject}observeIncomingMessages(){return this._incomingMessageSubject}destroy(){this._appContentMessagesSubject.complete(),this._messagesSubject.complete(),this._incomingMessageSubject.complete()}}var L,k;!function(e){e.REQUEST="request",e.OFFER="offer",e.ANSWER="answer",e.REJECTION="rejection"}(L||(L={}));class D extends C{constructor(e,t,n,r){const i=n.map(e=>({peerId:e.getId(),roles:e.getRoles(),quality:e.getMeter().getPeerUpdateQuality(r)})).sort(e=>e.quality).reverse().slice(0,5);super(e,t,u.PEER_SUGGESTION,i)}getBody(){return this._body}}class B extends C{constructor(e,t,n,r){const i=n.map(e=>({peerId:e.getId(),roles:e.getRoles(),quality:e.getMeter().getPeerUpdateQuality(r)}));super(e,t,u.PEER_UPDATE,i)}getBody(){return this._body}}class x{constructor(e=[]){this._values=e.slice()}get length(){return this._values.length}static fromIterable(e){return new this(Array.from(e))}fromArray(e){return new this.constructor(e)}asArray(){return this._values.slice()}has(e){return!!this.find(e)}count(e){return this.filter(e).length}filter(e){return this.fromArray(this._values.filter(e))}find(e){return this._values.find(e)}exclude(e){const t=e(this.fromArray(this._values))._values;return this.filter(e=>-1===t.indexOf(e))}sortBy(e){return this.fromArray(this._values.sort((t,n)=>{const r=e(t),i=e(n);return r>i?1:r<i?-1:0}))}forEach(e){return this._values.forEach((t,n,r)=>e(t,n,this.fromArray(r))),this.fromArray(this._values)}map(e){return this._values.map((t,n,r)=>e(t,n,this.fromArray(r)))}slice(e,t){return this.fromArray(this._values.slice(e,t))}[Symbol.iterator](){return this._values[Symbol.iterator]()}reverse(){return this.fromArray(this._values.reverse())}concat(e){const t=this._values.concat(e._values);return new this.constructor(t)}push(...e){return this._values.push(...e)}shift(){return this._values.shift()}pop(){return this._values.pop()}toString(){return JSON.stringify(this._values,void 0,2)}}class U extends x{filterByStates(...e){return new U(this._values.filter(t=>e.indexOf(t.getState())>=0))}filterDirect(){return this.exclude(e=>e.filterByProtocol(i.VIA,i.VIA_MULTI))}filterDirectData(){return this.filterByProtocol(i.WEBSOCKET,i.WEBSOCKET_UNSECURE,i.WEBRTC_DATA)}filterByProtocol(...e){return new U(this._values.filter(t=>t.getAddress().isProtocol(...e)))}filterByLocation(...e){return new U(this._values.filter(t=>e.includes(t.getAddress().getLocation())))}filterByMeter(e){return new U(this._values.filter(t=>e(t.getMeter())))}sortByQuality(e,t=((e,t)=>e.getQuality(t))){return this.sortBy(n=>t(n.getMeter(),e))}}!function(e){e.PUNISHED="punished",e.PROTECTED="protected",e.UNPUNISHED="unpunished",e.UNPROTECTED="unprotected"}(k||(k={}));class j{constructor(e,t){this._punished=!1,this._protected=!1,this._lastSeenTick=0,this._connection=e,this._subject=new h.a,this._clock=t.fork(),this.listenOnMessages()}listenOnMessages(){this._connection.observeMessageReceived().subscribe(this.onMessage.bind(this))}setPunished(e){const t=this._punished;this._punished=e,this._punished!==t&&(this._punished?this._subject.next({type:k.PUNISHED,connection:this._connection}):this._subject.next({type:k.UNPUNISHED,connection:this._connection}))}setProtected(e){const t=this._protected;this._protected=e,this._protected!==t&&(this._protected?this._subject.next({type:k.PROTECTED,connection:this._connection}):this._subject.next({type:k.UNPROTECTED,connection:this._connection}))}onMessage(e){this._clock?this._lastSeenTick=this._clock.getTick():b.getLogger(this._connection.getAddress().getId()).error("can not read clock for message",e)}updateLastSeen(){this._lastSeenTick=this._clock.getTick()}isLastSeenExpired(){return this._clock.getTick()-this._lastSeenTick>A.getDefault().LAST_SEEN_TIMEOUT}getLastSeen(){return this._clock.getTick()-this._lastSeenTick}isPunished(){return this._punished}isProtected(){return this._protected}start(){this.setProtected(!0),this._clock.rewind(),this._clock.setTimeout(()=>{this.setPunished(!1),this.setProtected(!1)},A.getDefault().CONNECTION_METER_PROTECTION_TIME)}stop(){const e=this._clock.getTick()<A.getDefault().CONNECTION_METER_OPEN_GRACE_PERIOD_TIME;this.setPunished(e),this.setProtected(!1)}observe(){return this._subject}toJSON(){return{lastSeen:this.getLastSeen(),protected:this.isProtected(),punished:this.isPunished(),isExpired:this.isLastSeenExpired()}}toString(){return JSON.stringify(this.toJSON(),void 0,2)}}class F extends j{constructor(e,t,n=1){super(e,t),this._quality=n}updateLastSeen(){super.updateLastSeen()}getQuality(){return this._quality}setQuality(e){this._quality=e}getRouterLinkQuality(e){const t=this._connection.getAddress(),n=e.filterById(t.getLocation()).pop();return n?n.hasRole(w.SIGNAL,w.ROUTER)?1:n.getMeter().getRouterLinkQuality():0}start(){}stop(){}}class q{constructor(e,t,n){e.getLocation()||e.setLocation(`c${Math.round(1e4+89999*Math.random())}`),this._id=e.getLocation(),this._options=n,this._address=e,this._clock=t,this._connectionState=s.CLOSED,this._stateChangeSubject=new h.a,this._messageReceivedSubject=new h.a}getMeter(){return this._meter}getAddress(){return this._address}getId(){return this._id}onOpen(e){this._onOpenResolver&&this._onOpenResolver(e),this._onOpenResolver=null,this._onOpenRejector=null,this._connectionState=s.OPEN,this._negotiationState=o.ESTABLISHED,this._stateChangeSubject.next(this._connectionState),this.getMeter().start()}onClose(e="connection closed without reason"){this.getMeter().stop(),this._onOpenRejector&&this._onOpenRejector(e),this._clock.stop(),this._onOpenResolver=null,this._onOpenRejector=null,this._negotiationState=null,this._connectionState=s.CLOSED,this._stateChangeSubject.next(this._connectionState),this._stateChangeSubject.complete(),this._messageReceivedSubject.complete()}onError(e="connection error without reason"){this._connectionState=s.ERROR,this._stateChangeSubject.next(this._connectionState),this.onClose(e)}onMessage(e){this._messageReceivedSubject.next(e)}close(){this._connectionState=s.CLOSING,this._stateChangeSubject.next(this._connectionState),this.closeClient()}open(){return this._connectionState=s.OPENING,this._negotiationState=o.INITIALIZING,this._stateChangeSubject.next(this._connectionState),new Promise((e,t)=>{this._onOpenResolver=e,this._onOpenRejector=t,this.openClient()})}isInState(...e){return-1!==e.indexOf(this.getState())}getState(){return this._connectionState}getNegotiationState(){return this._negotiationState}observeMessageReceived(){return this._messageReceivedSubject}observeStateChange(){return this._stateChangeSubject}toString(){return JSON.stringify({id:this._id,address:this._address.toString(),connectionState:this._connectionState,negotiationState:this._negotiationState,meter:this.getMeter().toJSON()},void 0,2)}}class W extends q{constructor(e,t,n){super(e,t,n),this._meter=new F(this,t,n.payload.quality)}parentStateChanged(e){switch(e){case s.OPEN:this.onOpen(this);break;case s.CLOSED:this.onClose("parent connection closed");break;case s.ERROR:this.onError("parent connection error")}}closeClient(){this._parentSubscription.unsubscribe(),this.onClose("via connection close client")}openClient(){const e=this._options.payload.parent;!e||e.isInState(s.CLOSING,s.CLOSED)?this.onError("parent connection missing"):e.isInState(s.OPEN)&&this.onOpen(this),this._parentSubscription=e.observeStateChange().subscribe(this.parentStateChanged.bind(this))}send(e){throw new Error("via connection cannot send directly")}}class $ extends C{constructor(e,t,n){super(e,t,u.PING,n)}getBody(){return this._body}}class G extends C{constructor(e,t,n){super(e,t,u.PONG,n)}getBody(){return this._body}}class V{constructor(e){this._clock=e,this._timerPerSequence=new Map}getHighestSequence(){return Array.from(this._timerPerSequence.keys()).sort((e,t)=>e-t).pop()}cleanUpOldSequences(){const e=this.getHighestSequence();Array.from(this._timerPerSequence.keys()).filter(t=>e-t>=A.getDefault().LATENCY_WINDOW_SIZE).forEach(e=>{this._timerPerSequence.delete(e)})}start(e){this._timerPerSequence.get(e)||this._timerPerSequence.set(e,this._clock.timeIt()),this.cleanUpOldSequences()}stop(e){const t=this._timerPerSequence.get(e);"function"==typeof t&&this._timerPerSequence.set(e,t())}asArray(){return Array.from(this._timerPerSequence.entries()).filter(([e,t])=>"number"==typeof t&&t>0).map(([e,t])=>t)}}class H extends j{constructor(e,t,n,r){super(e,r),this._receiveSlidingWindow=new P,this._echoSlidingWindow=new P,this._originator=t,this._receiver=n,this._messageSubject=new h.a,this._latencyPerSequence=new V(r)}emitMessage(e){this._messageSubject.next(e)}sendPong(e,t){const n=new G(this._originator,e,t);b.getLogger(this._originator.getId()).debug(`send pong to ${e.getId()}`,n),this.emitMessage(n)}sendPing(){this._echoSlidingWindow.slide();const e=this._echoSlidingWindow.getSequenceNumber(),t=new $(this._originator,this._receiver,e);b.getLogger(this._originator.getId()).debug(`send ping to ${this._receiver.getId()}`,t),this.emitMessage(t),this._latencyPerSequence.start(e)}handlePing(e){b.getLogger(this._originator.getId()).debug(`handle ping from ${e.getSender().getId()}`,e,"receive sliding window:",`[${Array.from(this._receiveSlidingWindow.values()).join(", ")}]`),this.sendPong(e.getSender(),e.getBody()),this._receiveSlidingWindow.add(e.getBody())}handlePong(e){const t=e.getBody();this._echoSlidingWindow.add(t),this._latencyPerSequence.stop(t)}getEq(){return this._echoSlidingWindow.size/A.getDefault().SLIDING_WINDOW_SIZE}getRq(){return this._receiveSlidingWindow.size/A.getDefault().SLIDING_WINDOW_SIZE}getTq(){const e=this.getRq();if(0===e)return 0;{const t=this.getEq()/e;return t>1?A.getDefault().DEFAULT_QUALITY:t}}getLatencyQuality(e){const t=A.getDefault(),n=this.getAverageLatency();if(0===n)return t.DEFAULT_QUALITY;const r=e.aggregateConnections(e=>e.filterByProtocol(i.WEBRTC_DATA).filterByStates(s.OPEN)).map(e=>e.getMeter().getAverageLatency()).filter(e=>e>0);if(r.length<=1)return A.getDefault().DEFAULT_QUALITY;const o=r.reduce((e,t)=>t<e?t:e,Number.MAX_SAFE_INTEGER),a=r.reduce((e,t)=>t>e?t:e,0);switch(n){case o:return 1;case a:return 0;default:return 1-(n-o)/(a-o)}}getAverageLatency(){const e=A.getDefault(),t=this._latencyPerSequence.asArray();return 0===t.length?e.DEFAULT_QUALITY:Math.max(t.reduce((e,t)=>e+t,0)/t.length,e.DEFAULT_QUALITY)}getQuality(e){return(this.getTq()+this.getLatencyQuality(e))/2}onMessage(e){super.onMessage(e),e.getSubject()===u.PING?this.handlePing(e):e.getSubject()===u.PONG&&this.handlePong(e)}observeMessages(){return this._messageSubject}start(){super.start(),this._pingInterval=this._clock.setInterval(()=>{this.sendPing()},A.getDefault().TRANSMISSION_PING_INTERVAL)}stop(){super.stop(),this._pingInterval&&this._clock.clearInterval(this._pingInterval)}}class Y extends q{constructor(e,t,n){super(e,t,n),this._simplePeerOptions={trickle:!1}}createOffer(e){this._negotiationState=o.WAITING_FOR_OFFER,this._simplePeerOptions.initiator=!0,this._client=new d(this._simplePeerOptions),this._client.on("signal",t=>{const n=Object.assign(t,this.getAdditionalOfferPayload());b.getLogger(e).debug(`webrtc offer for ${this.getAddress().getId()} ready`,JSON.stringify(t)),this.onMessage(new C(this.getMyAddress(),new m(this.getAddress().getId()),u.CONNECTION_NEGOTIATION,n)),this._negotiationState=o.WAITING_FOR_ANSWER})}createAnswer(e,t){const n=t.payload;this._negotiationState=o.WAITING_FOR_ANSWER,this._simplePeerOptions.initiator=!1,this._client=new d(this._simplePeerOptions),this._client.signal(n),this._client.on("signal",t=>{b.getLogger(e).debug(`webrtc answer for ${this.getAddress().getId()} ready`,JSON.stringify(t)),this.onMessage(new C(this.getMyAddress(),new m(this.getAddress().getId()),u.CONNECTION_NEGOTIATION,t)),this._negotiationState=o.WAITING_FOR_ESTABLISH})}getMyAddress(){return new m(this._options.mitosisId,this.getAddress().getProtocol(),this.getId())}getRTCPeerConnection(){if(this._client)return this._client._pc}getStats(){const e=this.getRTCPeerConnection();return e?new Promise(t=>{e.getStats().then(e=>{const n=[];e.forEach(e=>{n.push(e)}),t(n)})}):Promise.reject(`no stats for missing connection to ${this.getMyAddress().getId()}`)}closeClient(){this._client?(this._client.destroy(),this._client=null):this.onClose("webrtc peer connection was closed and no client exists; probably other client has closed")}bindClientListeners(){this._client.on("connect",()=>{this.onOpen(this)}),this._client.on("data",e=>{this.onMessage(C.fromString(e))}),this._client.on("close",()=>{this.onClose("webrtc peer connection close")}),this._client.on("error",e=>{this.onError(e)})}openClient(){if(!this._options)throw new Error("webrtc cannot be opened without options");if(this._options.payload)switch(this._options.payload.type){case L.OFFER:this.createAnswer(this._options.mitosisId,this._options);break;case L.ANSWER:this.establish(this._options);break;default:throw new Error(`webrtc options unsupported ${this._options.payload.type}`)}else this.createOffer(this._options.mitosisId);this.bindClientListeners()}isInitiator(){return this._simplePeerOptions.initiator}send(e){if(!this._client)throw new Error("webrtc client not initialized");if(this.getState()!==s.OPEN)throw new Error(`webrtc cannot send to ${this.getState()} connection`);this._client.send(e.toString())}establish(e){const t=e.payload;b.getLogger(this._options.mitosisId).debug(`webrtc answer for ${this.getAddress().getId()} negotiating`,JSON.stringify(t)),this._client.signal(t)}}class Q extends Y{constructor(e,t,n){super(e,t,n),this._meter=new H(this,this.getMyAddress(),this.getAddress(),this._clock),this._meter.observeMessages().subscribe(this.sendMessageOverUnreliableChannel.bind(this))}sendMessageOverUnreliableChannel(e){this._unreliableChannel&&"open"===this._unreliableChannel.readyState&&this._unreliableChannel.send(e.toString())}listenOnUnreliableChannel(){this._unreliableChannel.onmessage=(e=>{const t=C.fromString(e.data);this._meter.onMessage(t)})}bindClientListeners(){super.bindClientListeners();const e=this.getRTCPeerConnection().ondatachannel;this.getRTCPeerConnection().ondatachannel=(t=>{t.channel.label===Q._statsDataChannelLabel?(this._unreliableChannel=t.channel,this.listenOnUnreliableChannel()):"function"==typeof e&&e.call(this._client,t)})}getAdditionalOfferPayload(){return{}}establish(e){super.establish(e),this._unreliableChannel=super.getRTCPeerConnection().createDataChannel(Q._statsDataChannelLabel,{ordered:!1,maxRetransmits:0}),this.listenOnUnreliableChannel()}}Q._statsDataChannelLabel="stats";class z extends j{getQuality(){return.1}isLastSeenExpired(){return!1}start(){}stop(){}}class K extends j{getQuality(){return 1}isLastSeenExpired(){return!1}start(){}stop(){}}class J extends q{constructor(e,t,n){super(e,t,n),this._meter=new K(this,t)}onSocketOpen(){this.onOpen(this)}onSocketClose(e){this.onClose(e)}onSocketMessage(e){this.onMessage(C.fromString(e.data))}onSocketError(e){this.onError(e)}closeClient(){this._client.close(),this._client=null}send(e){if(!this._client)throw new Error("socket client not initialized");if(this.getState()!==s.OPEN)throw new Error(`socket connection not in open state (${this.getState()})`);if(this._client.readyState!==WebSocket.OPEN)throw new Error(`socket client not in open state (${this._client.readyState})`);this._client.send(e.toString())}openClient(){this._client=new WebSocket(`${this._address.getProtocol()}://${this._address.getLocation()}`),this._client.onopen=this.onSocketOpen.bind(this),this._client.onclose=this.onSocketClose.bind(this),this._client.onmessage=this.onSocketMessage.bind(this),this._client.onerror=this.onSocketError.bind(this)}}const X=new Map;X.set(i.WEBSOCKET,J),X.set(i.WEBSOCKET_UNSECURE,J),X.set(i.WEBRTC_DATA,Q),X.set(i.WEBRTC_STREAM,class extends Y{constructor(e,t,n){super(e,t,n),this._meter=new z(this,t),this._streamSubject=new h.a,this.setStream(n.stream)}bindStreamListeners(){this._stream&&(this._stream.onactive=(()=>{this._streamSubject.next({type:a.ADDED,stream:this._stream,channelId:this._channelId})}),this._stream.oninactive=(()=>{this._streamSubject.next({type:a.REMOVED,stream:this._stream,channelId:this._channelId})}))}createAnswer(e,t){this._channelId=t.channelId,super.createAnswer(e,t)}getAdditionalOfferPayload(){return{channelId:this.getChannelId()||"any"}}closeClient(){this.removeStream(),super.closeClient()}bindClientListeners(){super.bindClientListeners(),this._client.on("track",(e,t)=>{this.setStream(t)}),this._client.on("stream",e=>{this.setStream(e)})}send(e){b.getLogger(this._address.getId()).error("stream connection can not send messages",e)}getChannelId(){return this._options.channelId||this._channelId}setStream(e){e?(this._stream=e,this._simplePeerOptions.stream=e,this.bindStreamListeners(),this._streamSubject.next({stream:this._stream,channelId:this._channelId,type:a.ADDED})):this.removeStream()}getStream(){return this._stream}removeStream(){if(this._stream){const e=this._stream;e.getTracks().forEach(e=>e.stop()),this._stream=null,this._streamSubject.next({stream:e,channelId:this._channelId,type:a.REMOVED})}}observeStreamChurn(){return this._streamSubject}}),X.set(i.VIA,W),X.set(i.VIA_MULTI,W);class Z{constructor(){this._rankPerSequenceMap=new Map}get length(){return this._rankPerSequenceMap.size}getHighestSequence(){return Array.from(this._rankPerSequenceMap.keys()).sort((e,t)=>e-t).pop()}cleanUpOldSequences(){const e=this.getHighestSequence();Array.from(this._rankPerSequenceMap.keys()).filter(t=>e-t>=A.getDefault().ROUTER_ALIVE_HIGHSCORE_WINDOW_SIZE).forEach(e=>{this._rankPerSequenceMap.delete(e)})}addSequence(e){this._rankPerSequenceMap.set(e,null),this.cleanUpOldSequences()}setRankForSequence(e,t){null===this._rankPerSequenceMap.get(e)&&this._rankPerSequenceMap.set(e,t)}hasReceivedSequence(e){return!!this._rankPerSequenceMap.get(e)}getAverageRanking(){const e=A.getDefault();if(0===this._rankPerSequenceMap.size)return 0;let t=0;const n=e.DIRECT_CONNECTIONS_MAX,r=this._rankPerSequenceMap.entries();let i=r.next();for(;!i.done;){const[e,s]=i.value;s&&(t+=(n-s+1)/n),i=r.next()}return Math.pow(t/this._rankPerSequenceMap.size||e.DEFAULT_ROUTER_RANK,2)}reset(){this._rankPerSequenceMap.clear()}}class ee{constructor(e,t,n){this._punishedConnections=0,this._protectedConnections=0,this._connectionsPerAddress=e,this._remotePeerId=t,this._clock=n,this._routerAliveHighScore=new Z,this.listenOnConnectionChurn()}listenOnConnectionChurn(){this._connectionsPerAddress.observe().pipe(Object(l.a)(e=>e.type===a.ADDED)).subscribe(e=>{e.value.getMeter().observe().subscribe(this.listenOnConnectionMeter.bind(this))})}listenOnConnectionMeter(e){switch(e.type){case k.PUNISHED:b.getLogger(e.connection.getAddress().getId()).info(`punish connection to ${e.connection.getAddress().getId()}`,e.connection),this._punishedConnections++,this._clock.setTimeout(()=>{this._punishedConnections--},A.getDefault().CONNECTION_METER_PUNISHMENT_TIME);break;case k.UNPUNISHED:break;case k.PROTECTED:this._protectedConnections++;break;case k.UNPROTECTED:this._protectedConnections--}}getConnectionTable(){return U.fromIterable(this._connectionsPerAddress.values())}getLastSeen(){return this.getConnectionTable().map(e=>e.getMeter().getLastSeen()).reduce((e,t)=>Math.min(e,t),0)}lastSeenIsExpired(){return!this.getConnectionTable().find(e=>!1===e.getMeter().isLastSeenExpired())}getAverageConnectionQuality(e){const t=this.getConnectionTable().filterByProtocol(i.WEBRTC_DATA,i.WEBSOCKET,i.WEBSOCKET_UNSECURE,i.VIA).filterByStates(s.OPEN);return 0===t.length?A.getDefault().DEFAULT_QUALITY:t.map(t=>t.getMeter().getQuality(e)).reduce((e,t)=>e+t,0)/t.length}getBestConnectionQuality(e){return this.getConnectionTable().map(t=>t.getMeter().getQuality(e)).reduce((e,t)=>Math.max(e,t),0)}getConnectionProtection(){return this.getConnectionTable().filterByProtocol(i.VIA).length<A.getDefault().DIRECT_CONNECTIONS_GOAL_MIN&&this._protectedConnections>0?1:0}getConnectionSaturation(e){const t=e.countConnections(e=>e.filterByProtocol(i.VIA).filterByLocation(this._remotePeerId))+e.filterById(this._remotePeerId).countConnections(e=>e.filterDirectData()),n=A.getDefault(),r=(n.DIRECT_CONNECTIONS_MAX-t)/n.DIRECT_CONNECTIONS_GOAL_MAX;return Math.min(Math.max(0,r),1)}getAverageConnectionPunishment(){const e=this._connectionsPerAddress.asTable().filter(e=>e.getAddress().isProtocol(i.WEBRTC_DATA,i.WEBSOCKET_UNSECURE,i.WEBSOCKET)),t=e.length-this._punishedConnections;return 0===e.length?0:t/e.length}getPeerUpdateQuality(e){return this.getBestConnectionQuality(e)*this.getConnectionSaturation(e)*this.getRouterLinkQuality()}getAverageRouterLinkQuality(e){const t=U.fromIterable(this._connectionsPerAddress.values());if(t.filterDirectData().length>0)return this.getRouterLinkQuality();const n=t.filterByProtocol(i.VIA);return 0===n.length?0:n.map(t=>t.getMeter().getRouterLinkQuality(e)).reduce((e,t)=>e+t,0)/n.length}getRouterLinkQuality(){const e=this.getRouterAliveHighScore().getAverageRanking();return 0===e?A.getDefault().DEFAULT_QUALITY:e}getAcquisitionQuality(e){return this.getAverageRouterLinkQuality(e)*this.getAverageConnectionQuality(e)*this.getConnectionSaturation(e)}getRouterAliveHighScore(){return this._routerAliveHighScore}getQuality(e){return this.getAverageConnectionQuality(e)*(this.getAverageConnectionPunishment()+this.getConnectionProtection())}start(){}stop(){this._clock.stop()}}class te extends x{}class ne extends Map{constructor(e){super(e),this._subject=new h.a}clear(){Array.from(this.values()).forEach(e=>this._subject.next({type:a.REMOVED,value:e})),super.clear()}delete(e){const t=this.get(e),n=super.delete(e);return n&&this._subject.next({type:a.REMOVED,value:t}),n}set(e,t){const n=super.set(e,t);return n&&this._subject.next({type:a.ADDED,value:t}),n}asTable(){return te.fromIterable(this.values())}keysAsList(){return Array.from(this.keys())}valuesAsList(){return Array.from(this.values())}entriesAsList(){return Array.from(this.entries())}observe(){return this._subject}destroy(){this._subject.complete()}}class re{constructor(e,t,n){this._id=e,this._mitosisId=t,this._clock=n,this._roleTypes=[w.PEER],this._connectionsPerAddress=new ne,this._openConnectionPromises=new Map,this._connectionChurnSubject=new h.a,this._meter=new ee(this._connectionsPerAddress,this._id,n.fork())}listenOnConnectionChanges(e){e.observeStateChange().subscribe(t=>{switch(t){case s.CLOSED:this.cleanUpRouterForLastDirect(e.getAddress()),this._connectionsPerAddress.delete(e.getAddress().toString()),this._connectionChurnSubject.next({connection:e,type:a.REMOVED})}b.getLogger(this._mitosisId).debug(`${e.getAddress().getProtocol()} connection to ${e.getAddress().getId()} ${t.toString()}`,e)})}cleanUpRouterForLastDirect(e){if(e.isProtocol(i.WEBRTC_DATA)){this.getConnectionTable().filterDirectData().length>0||this.getMeter().getRouterAliveHighScore().reset()}}openConnection(e){let t=this._openConnectionPromises.get(e);if(!t)switch(e.getState()){case s.OPEN:t=Promise.resolve(this);break;case s.CLOSING:case s.ERROR:t=Promise.reject(`will not connect to connection in ${e.getState()}`);break;case s.CLOSED:t=new Promise((t,n)=>{e.open().then(()=>{t(this)}).catch(e=>{n(e)}).finally(()=>{this._openConnectionPromises.delete(e)})}),this._openConnectionPromises.set(e,t);break;default:throw new Error("opening connection should be in map")}return t}createConnection(e,t){(t=t||{}).mitosisId=t.mitosisId||this._mitosisId;const n=X.get(e.getProtocol());if(!n)throw new Error(`unsupported protocol ${e.getProtocol()}`);const r=new n(e,this._clock.fork(),t);return this._connectionsPerAddress.set(e.toString(),r),this._connectionChurnSubject.next({connection:r,type:a.ADDED}),this.listenOnConnectionChanges(r),r}getId(){return this._id}getRoles(){return this._roleTypes}setRoles(e){this._roleTypes=e}getPublicKey(){return this._publicKey}getConnectionTable(){return U.fromIterable(this._connectionsPerAddress.values())}getMeter(){return this._meter}getQuality(e){return this._meter.getQuality(e)}getConnectionForAddress(e){return this._connectionsPerAddress.get(e.toString())}hasRole(...e){return this._roleTypes.filter(t=>e.indexOf(t)>=0).length>0}connect(e,t){const n=this.getMeter().getAverageConnectionPunishment();if(n<0)return b.getLogger(this._mitosisId).warn(`punish value of ${this.getId()} is ${n}`),Promise.reject(`can not connect to peer ${this.getId()} because its punish value is ${n}`);let r=this._connectionsPerAddress.get(e.toString());return r||(r=this.createConnection(e,t)),this.openConnection(r).catch(t=>(b.getLogger(this._mitosisId).error(`can not open connection to ${e.getId()}`,t),Promise.reject(t)))}observeChurn(){return this._connectionChurnSubject}toString(){return JSON.stringify({id:this._id,roles:this._roleTypes,connections:this._connectionsPerAddress.keysAsList()},void 0,2)}destroy(){this._meter.stop(),this._connectionsPerAddress.forEach(e=>e.close()),this.observeChurn().subscribe(()=>{0===this._connectionsPerAddress.size&&this._connectionChurnSubject.complete()}),this._clock.stop()}}class ie extends x{filterConnections(e){return new ie(this._values.filter(t=>e(t.getConnectionTable()).length>0))}aggregateConnections(e){return new U(this._values.map(e=>e.getConnectionTable()).map(t=>e(t).asArray()).reduce((e,t)=>e.concat(t),[]))}filterByRole(...e){return new ie(this._values.filter(t=>t.hasRole(...e)))}filterIsProtected(e){return new ie(this._values.filter(t=>t.getMeter().getConnectionProtection()===(e?1:0)))}filterById(e){return new ie(this._values.filter(t=>t.getId()===e))}sortByQuality(e=(e=>e.getQuality(this))){return this.sortBy(t=>e(t.getMeter()))}countConnections(e=(e=>e)){return this._values.map(t=>e(t.getConnectionTable()).length).reduce((e,t)=>e+t,0)}sortById(){return this.sortBy(e=>e.getId())}toString(){return JSON.stringify(this._values.map(e=>e.getId()),void 0,2)}}class se{constructor(e,t,n){this._myId=e,this._roleManager=t,this._acquisitionBoost=0,this._clock=n,this._peers=[],this._peerChurnSubject=new h.a,this._peerConnectionChurnSubject=new h.a}onConnectionRemoved(e,t){0===t.getConnectionTable().length&&(this.removePeer(t),this.sendUnknownPeerToDirectPeers(t.getId())),0===t.getConnectionTable().filterDirectData().length&&this.getPeerTable().forEach(e=>e.getConnectionTable().filterByProtocol(i.VIA,i.VIA_MULTI).filterByLocation(t.getId()).forEach(e=>{b.getLogger(this._myId).warn("close via connection because parent connection was closed",e),e.close()})),this._peerConnectionChurnSubject.next({connection:e,type:a.REMOVED})}onConnectionAdded(e,t){this._peerConnectionChurnSubject.next({connection:e,type:a.ADDED})}getConfiguration(){return this._roleManager.getConfiguration()}broadcastAllowed(e){switch(e.getSubject()){case u.ROUTER_ALIVE:return!this._roleManager.hasRole(w.SIGNAL);default:return!1}}sendUnknownPeerToDirectPeers(e){this.getPeerTable().filterConnections(e=>e.filterDirect().filterByStates(s.OPEN)).forEach(t=>{this.sendMessageToPeer(t,new M(new m(this.getMyId()),new m(t.getId()),e))}),b.getLogger(this.getMyId()).warn(`tell direct peers that peer ${e} does not exist anymore`)}broadcast(e){if(this.broadcastAllowed(e)){let t=this.getPeerTable().filterConnections(e=>e.filterDirectData().filterByStates(s.OPEN));e.getInboundAddress()&&(t=t.exclude(t=>t.filterById(e.getInboundAddress().getId()))),t.forEach(t=>this.sendMessageToPeer(t,e))}else b.getLogger(this.getMyId()).warn(`${e.getSubject()} is not allowed to be broadcast`)}updateViaPeer(e,t,n){e.getConnectionTable().filterByProtocol(i.VIA,i.VIA_MULTI).filterByLocation(t).forEach(e=>{const t=e.getMeter();t.updateLastSeen(),n&&t.setQuality(n)})}resolvePeer(e){if(!e){if(!this._roleManager.hasRole(w.ROUTER)){const e=this.getPeerTable().filterByRole(w.ROUTER).pop();if(e)return this.resolvePeer(e)}return}if(this.getPeerTable().filterById(e.getId()).countConnections(e=>e.filterDirectData().filterByStates(s.OPEN))>0)return e;if(e){let t;const n=e.getConnectionTable().filterByProtocol(i.VIA,i.VIA_MULTI);if(t=e.hasRole(w.ROUTER)?n.sortBy(e=>e.getMeter().getRouterLinkQuality(this.getPeerTable())).pop():n.sortByQuality(this.getPeerTable()).pop())return this.getPeerById(t.getAddress().getLocation())}}sendMessageToPeer(e,t){const n=e.getConnectionTable().filterByStates(s.OPEN).filterDirectData().sortByQuality(this.getPeerTable()).pop();if(!n)return b.getLogger(this.getMyId()).error(`sending failed because no connection to ${e.getId()}`,t,e),!1;try{return n.send(t),b.getLogger(this.getMyId()).debug(`sending ${t.getSubject()} to ${n.getAddress().getId()}`,t),!0}catch(e){return b.getLogger(this.getMyId()).error(`cannot send ${t.getSubject()} to ${n.getAddress().getId()}`,e),n.close(),!1}}getMyId(){return this._myId}connectTo(e,t){let n=this.getPeerById(e.getId());if(n&&n.getConnectionForAddress(e))return Promise.resolve(n);const r=this.getPeerTable().filterConnections(e=>e.filterDirect());if(!e.isProtocol(i.VIA,i.VIA_MULTI)&&r.length>=this.getConfiguration().DIRECT_CONNECTIONS_MAX){const t=`rejecting ${e.getId()} because max connections reached`;return b.getLogger(this.getMyId()).error(t),Promise.reject(t)}return n||((n=new re(e.getId(),this._myId,this._clock.fork())).observeChurn().pipe(Object(l.a)(e=>e.type===a.REMOVED)).subscribe(e=>this.onConnectionRemoved(e.connection,n)),n.observeChurn().pipe(Object(l.a)(e=>e.type===a.ADDED)).subscribe(e=>this.onConnectionAdded(e.connection,n)),this._peers.push(n),this._peerChurnSubject.next({peer:n,type:a.ADDED})),n.connect(e,t).then(()=>n).catch(t=>(b.getLogger(this._myId).warn(`cannot open connection to ${e.getId()}`,t),Promise.reject(t)))}connectToVia(e,t){const n=this.getPeerById(e.getLocation());if(n){b.getLogger(this.getMyId()).info(`connect to via ${e.getId()}`,e);const r=n.getConnectionTable().filterDirectData().filterByStates(s.OPEN).shift();if(!r){const t=`cannot connect to ${e.getId()} because parent has no open direct connection`;return b.getLogger(this._myId).error(t),Promise.reject(t)}return(t=t||{payload:{}}).payload.quality=r.getMeter().getQuality(this.getPeerTable()),t.payload.parent=r,this.connectTo(e,t)}{const t=`cannot connect to ${e.getId()} because via ${e.getLocation()} is missing`;return b.getLogger(this._myId).error(t),Promise.reject(t)}}ensureConnection(e,t){const n=this.getPeerById(e.getId());if(!n)return e.getId()===e.getLocation()?Promise.reject(`direct connection to ${e.getId()} disappeared`):(b.getLogger(this.getMyId()).info(`ensure connection to new peer ${e.getId()}`,e),this.connectToVia(e,t));if(n.getId()===this._myId)return Promise.reject("will not connect to myself");if(n.getConnectionForAddress(e)){if(e.isProtocol(i.VIA,i.VIA_MULTI)){let r;t&&t.payload.quality&&(r=t.payload.quality),this.updateViaPeer(n,e.getLocation(),r),b.getLogger(this._myId).debug(`update ${e.getProtocol()} connection ${n.getId()}`,n)}return Promise.resolve(n)}return b.getLogger(this.getMyId()).info(`add new via connection to existing peer ${e.getId()}`,e),this.connectToVia(e,t)}getAcquisitionBoost(){return this._acquisitionBoost}activateAcquisitionBoost(){this._acquisitionBoost=this.getConfiguration().DIRECT_CONNECTION_BOOST_AMOUNT,this._clock.setTimeout(()=>{this._acquisitionBoost=0},this.getConfiguration().DIRECT_CONNECTION_BOOST_TIMEOUT)}sendPeerUpdate(e){const t=this.getPeerTable().filterByRole(w.PEER).filterConnections(e=>e.filterDirectData().filterByStates(s.OPEN)),n=new B(new m(this.getMyId()),new m(e),t,this.getPeerTable());this.sendMessage(n)}sendPeerSuggestion(e){const t=this.getPeerTable().filterByRole(w.PEER).filterConnections(e=>e.filterDirectData().filterByStates(s.OPEN)),n=new D(new m(this.getMyId()),new m(e),t,this.getPeerTable());b.getLogger(this.getMyId()).debug(`send peer suggestion to ${e}`),this.sendMessage(n)}handleRouterAlive(e,t){const n=e.getBody().sequence,r=this.getPeerById(e.getInboundAddress().getId()),i=this.getPeerTable().filterConnections(e=>e.filterDirectData());if(t){const t=this.getPeerById(e.getSender().getId());t&&t.setRoles([w.PEER,w.ROUTER]),i.forEach(e=>e.getMeter().getRouterAliveHighScore().addSequence(n)),r.getMeter().getRouterAliveHighScore().setRankForSequence(n,1)}else{const e=i.filter(e=>e.getMeter().getRouterAliveHighScore().hasReceivedSequence(n));r.getMeter().getRouterAliveHighScore().setRankForSequence(n,e.length+1)}}updateSuggestedPeers(e,t){const n=e.getSender().getId(),r=[];e.getBody().filter(e=>e.peerId!==this._myId).forEach(e=>{r.push(e.peerId);const n=!!this.getPeerById(e.peerId);this.ensureConnection(new m(e.peerId,i.VIA_MULTI,t)).then(t=>{n||t.setRoles(e.roles)}).catch(e=>b.getLogger(this.getMyId()).debug(e))}),this.getPeerTable().forEach(e=>e.getConnectionTable().filterByProtocol(i.VIA).filterByLocation(n).filter(e=>-1===r.indexOf(e.getAddress().getId())).forEach(e=>e.close()))}updatePeers(e,t){const n=e.getSender().getId(),r=[];n===t?(e.getBody().filter(e=>e.peerId!==this._myId).forEach(e=>{r.push(e.peerId);this.getPeerById(e.peerId);this.ensureConnection(new m(e.peerId,i.VIA,n),{payload:{quality:e.quality}}).then(t=>{t.setRoles(e.roles)}).catch(e=>b.getLogger(this.getMyId()).debug(e))}),this.getPeerTable().forEach(e=>e.getConnectionTable().filterByProtocol(i.VIA).filterByLocation(n).filter(e=>-1===r.indexOf(e.getAddress().getId())).forEach(e=>e.close()))):b.getLogger(this.getMyId()).error(`will not accept peer-update from ${n} via ${t}`,e)}negotiateConnection(e){const t=b.getLogger(this._myId),n=e.getSender(),r=e.getReceiver(),o=e.getBody(),a=(this.getPeerById(e.getInboundAddress().getId()),this.getPeerTable().countConnections(e=>e.filterDirect().filterByStates(s.OPEN)));let c=a>=this.getConfiguration().DIRECT_CONNECTIONS_MAX;if(this._roleManager.hasRole(w.ROUTER)&&(c=a>=this.getConfiguration().DIRECT_CONNECTIONS_GOAL_MAX),c&&o.type===L.OFFER){t.debug(`i have ${a} connections`),t.info("too many connections already",e);const i=new C(r,new m(n.getId()),u.CONNECTION_NEGOTIATION,{type:L.REJECTION});return this.sendMessage(i),void this.sendPeerSuggestion(n.getId())}const h={mitosisId:this._myId,payload:{type:o.type,sdp:o.sdp}};switch(o.type){case L.OFFER:this.connectTo(n,h).catch(e=>t.warn(`${n.getProtocol()} offer connection to ${n} failed`,e));break;case L.ANSWER:this.connectTo(n).then(r=>{const i=r.getConnectionForAddress(n);i?i.establish(h):t.error(`${n.getProtocol()} connection ${n.getLocation()} not found`,e)}).catch(e=>t.warn(`${n.getProtocol()} answer connection to ${n} failed`,e));break;case L.REJECTION:this.getPeerById(n.getId()).getConnectionTable().filterByProtocol(i.WEBRTC_DATA).filterByStates(s.OPENING).forEach(e=>{t.warn(`${n.getProtocol()} connection negotiation rejected by ${n}`,e),e.close()});break;default:throw new Error(`unsupported ${n.getProtocol()} connection negotiation type ${o.type}`)}}sendMessage(e){if(e.getTtl()<1)return b.getLogger(this._myId).warn(`message ${e.getId()} from ${e.getSender().getId()} timed out`,e),!1;if(e.decreaseTtl(),e.getReceiver().getId()===A.getDefault().BROADCAST_ADDRESS)return void this.broadcast(e);let t;const n=e.getReceiver().getProtocol();return(t=n?n===i.VIA||n===i.VIA_MULTI?this.getPeerById(e.getReceiver().getLocation()):this.getPeerById(e.getReceiver().getId()):this.resolvePeer(this.getPeerById(e.getReceiver().getId())))?this.sendMessageToPeer(t,e):(b.getLogger(this._myId).warn(`failed to send message to ${e.getReceiver().getId()}`,e),!1)}getPeerTable(){return new ie(this._peers)}getPeerById(e){return this._peers.find(t=>t.getId()===e)}removePeer(e){const t=this._peers.indexOf(e);t>-1&&this._peers.splice(t,1),this._peerChurnSubject.next({peer:e,type:a.REMOVED}),e.destroy()}observePeerChurn(){return this._peerChurnSubject}observePeerConnectionChurn(){return this._peerConnectionChurnSubject}toString(){return JSON.stringify({count:this._peers.length,remotePeers:this._peers},void 0,2)}destroy(){this._peerChurnSubject.complete(),this._peers.forEach(e=>this.removePeer(e)),this._clock.stop()}}class oe{constructor(){this._initialized=!1}isInitialized(){return this._initialized}onInit(e){}onConnectionClose(e,t){}onConnectionOpen(e,t){}onMessage(e,t){}requiresPeer(e){return!1}}class ae extends C{constructor(e,t){super(e,t,u.INTRODUCTION,null)}getBody(){return this._body}}function ce(e){const t=new ae(e.getMyAddress(),e.getSignalAddress());b.getLogger(e.getMyAddress().getId()).debug("connecting to signal"),e.getPeerManager().connectTo(e.getSignalAddress()).then(n=>{n.setRoles([w.SIGNAL]),e.getPeerManager().sendMessage(t)}).catch(t=>b.getLogger(e.getMyAddress().getId()).warn("connecting to signal failed",t))}function ue(e){e.getPeerTable().forEach(e=>{const t=e.getConnectionTable().filterDirect().filterByStates(s.OPEN);t.length<=1||Object.values(i).forEach(e=>{t.filter(t=>t.getAddress().isProtocol(e)).sortBy(e=>e.getAddress().getLocation()).slice(1).forEach(e=>e.close())})})}function he(e){const t=e.getRoleManager();t.hasRole(w.ROUTER,w.NEWBIE)||0===e.getPeerManager().getPeerTable().filterByRole(w.ROUTER).countConnections()&&(b.getLogger(e.getMyAddress().getId()).info("lost all connections to router, becoming a newbie again"),t.getRoles().forEach(e=>t.removeRole(e)),t.addRole(w.NEWBIE),e.getPeerManager().getPeerTable().forEach(e=>e.getMeter().getRouterAliveHighScore().reset()))}function le(e){if(e.getRoleManager().hasRole(w.ROUTER))return;0===e.getPeerManager().getPeerTable().filterByRole(w.ROUTER).countConnections()&&(b.getLogger(e.getMyAddress().getId()).debug("lost all connections to router"),e.getRoleManager().addRole(w.NEWBIE))}class de extends C{constructor(e,t,n){super(e,t,u.CHANNEL_ANNOUNCEMENT,n)}getBody(){return this._body}}function fe(e){const t=e.getStreamManager().getChannelTable().filter(e=>e.getProviderTable().has(e=>e.isSource()&&e.isLive()&&e.isActive())).map(t=>{const n=t.asAnnouncement(),r=e.getMyAddress().getId(),i=n.providers.find(e=>e.peerId===r),s=e.getStreamManager().getMyCapacity();return i?i.capacity=s:n.providers.push({peerId:r,capacity:s}),n});0!==t.length&&e.getPeerManager().getPeerTable().filterByRole(w.PEER).filterConnections(e=>e.filterDirect().filterByStates(s.OPEN)).forEach(n=>{const r=new de(e.getMyAddress(),new m(n.getId()),t);e.getPeerManager().sendMessage(r)})}class ge extends C{constructor(e,t){super(e,t,u.PEER_ALIVE,null)}getBody(){return this._body}}function pe(e){if(e.getRoleManager().hasRole(w.ROUTER))return;e.getPeerManager().getPeerTable().filterByRole(w.ROUTER).filterConnections(e=>e.filterByStates(s.OPEN)).exclude(e=>e.filterConnections(e=>e.filterByProtocol(i.VIA,i.WEBRTC_DATA,i.WEBSOCKET,i.WEBSOCKET_UNSECURE))).forEach(t=>e.getPeerManager().sendMessage(new ge(e.getMyAddress(),new m(t.getId()))))}function _e(e){e.getPeerManager().getPeerTable().filterByRole(w.PEER).filterConnections(e=>e.filterDirectData().filterByStates(s.OPEN)).forEach(t=>e.getPeerManager().sendPeerUpdate(t.getId()))}function ye(e){e.getPeerManager().getPeerTable().aggregateConnections(e=>e.filterByMeter(e=>e.isLastSeenExpired())).forEach(t=>{b.getLogger(e.getMyAddress().getId()).debug(`removing expired connection ${t.getAddress().getId()}`,t),t.close()})}function be(e){if(e.getRoleManager().hasRole(w.ROUTER))return;const t=e.getPeerManager().getPeerTable(),n=t.filterByRole(w.SIGNAL).filterConnections(e=>e.filterDirect().filterByStates(s.OPEN));if(0===n.length)return;if(e.getRoleManager().hasRole(w.NEWBIE))return;const r=t.filterByRole(w.ROUTER).aggregateConnections(e=>e.filterByStates(s.OPEN).exclude(e=>e.filterByLocation(...n.map(e=>e.getId())))),i=t.exclude(e=>e.filterByRole(w.SIGNAL)).aggregateConnections(e=>e.filterDirectData().filterByStates(s.OPEN));0===r.length||i.length<2||(b.getLogger(e.getMyAddress().getId()).info("close connection to signals",`routers: ${r.length}`,`connections: ${i.length}`,...n),n.forEach(e=>e.getConnectionTable().filterDirectData().forEach(e=>e.close())))}function me(e,t){if(t<1)return;const n=e.getRoleManager().getConfiguration(),r=n.DIRECT_CONNECTIONS_GOAL_MAX,i=n.DIRECT_CONNECTIONS_GOAL_MIN,o=e.getPeerManager().getPeerTable().filterConnections(e=>e.filterDirectData().filterByStates(s.OPEN)),a=o.aggregateConnections(e=>e.filterDirectData().filterByStates(s.OPEN));let c=o.filter(t=>0===e.getRoleManager().getRolesRequiringPeer(t).length).filterIsProtected(!1);const u=o.filter(e=>1===e.getMeter().getRouterLinkQuality()).pop();u&&(c=c.filter(e=>e.getId()!==u.getId()));const h=c.aggregateConnections(e=>e.filterDirectData().filterByStates(s.OPEN)).sortBy(t=>t.getMeter().isProtected()?1:t.getMeter().getQuality(e.getPeerManager().getPeerTable())),l=Math.max(h.length-i,0),d=Math.max(a.length-r,0),f=Math.min(l,d,t);f>0?h.slice(0,f).forEach(t=>{b.getLogger(e.getMyAddress().getId()).debug(`loosing worst connection ${t.getAddress().getId()}`,t),t.close()}):b.getLogger(e.getMyAddress().getId()).warn("can not loose peers because no closable connection is available")}function ve(e){const t=e.getRoleManager().getConfiguration(),n=e.getPeerManager().getPeerTable().countConnections(e=>e.filterDirectData().filterByStates(s.OPEN));me(e,n-t.DIRECT_CONNECTIONS_GOAL_MAX)}function Ee(e){e.getStreamManager().getChannelTable().has(e=>e.isActive())||e.getStreamManager().getChannelTable().map(t=>t.getProviderTable().filter(t=>t.getCapacity()>0&&t.getPeerId()!==e.getMyAddress().getId()).map(e=>({peerId:e.getPeerId(),channelId:t.getId()}))).reduce((e,t)=>e.concat(t),[]).forEach(t=>{const n=new C(new m(e.getMyAddress().getId(),i.WEBRTC_STREAM),new m(t.peerId),u.CONNECTION_NEGOTIATION,{type:L.REQUEST,channelId:t.channelId});e.getPeerManager().sendMessage(n)})}function Ce(e,t){if(t<1)return[];const n=e.getPeerManager().getPeerTable();let r=n.filterConnections(e=>e.filterByProtocol(i.VIA)).filterByRole(w.PEER).exclude(e=>e.filterConnections(e=>e.filterDirectData()));return r.length<=1&&(r=n.filterConnections(e=>e.filterByProtocol(i.VIA,i.VIA_MULTI)).filterByRole(w.PEER).exclude(e=>e.filterConnections(e=>e.filterDirectData()))),r.exclude(e=>e.filter(e=>e.getMeter().getAverageConnectionPunishment()<0)),r.sortBy(e=>e.getMeter().getAcquisitionQuality(n)).reverse().slice(0,t).map(t=>{const n=new m(t.getId(),i.WEBRTC_DATA);return b.getLogger(e.getMyAddress().getId()).debug(`connecting to ${t.getId()} with quality ${t.getMeter().getQuality(e.getPeerManager().getPeerTable())}`,t),e.getPeerManager().connectTo(n).catch(n=>b.getLogger(e.getMyAddress().getId()).debug(`can not acquire ${t.getId()}`,n))})}function Se(e){const t=e.getRoleManager().getConfiguration(),n=e.getPeerManager().getPeerTable().countConnections(e=>e.filterDirectData().filterByStates(s.OPEN,s.OPENING)),r=e.getPeerManager().getAcquisitionBoost(),i=t.DIRECT_CONNECTIONS_GOAL_MIN-n+r;if(i>0){b.getLogger(e.getMyAddress().getId()).debug(`need to acquire ${i} peers`,`min goal is ${t.DIRECT_CONNECTIONS_GOAL_MIN}`,`boost is ${r}`,`already have ${n} connections`);const s=Ce(e,i);Promise.all(s).catch(t=>b.getLogger(e.getMyAddress().getId()).warn("could not satisfy connection goal",t))}}function we(e){const t=e.getRoleManager().getConfiguration(),n=e.getPeerManager().getPeerTable(),r=n.aggregateConnections(e=>e.filterDirectData().filterByStates(s.OPEN,s.OPENING)),i=r.length,o=r.filterByStates(s.OPENING).length;if(i<t.DIRECT_CONNECTIONS_GOAL_MIN||o>0)return;const a=Math.min(t.TRY_OTHER_PEERS_COUNT+e.getPeerManager().getAcquisitionBoost(),t.DIRECT_CONNECTIONS_MAX-i);Ce(e,a).forEach(t=>t.then(()=>{n.countConnections(e=>e.filterDirectData().filterByStates(s.OPEN,s.OPENING))>i&&me(e,1)}).catch(t=>b.getLogger(e.getMyAddress().getId()).warn("could not try new peers",t)))}function Ie(e){const t=e.getRoleManager(),n=0===e.getPeerTable().filterByRole(w.SIGNAL).length;t.hasRole(w.ROUTER)&&n&&(b.getLogger(e.getMyAddress().getId()).debug("lost signal connection"),t.removeRole(w.ROUTER))}function Te(e){const t=e.getPeerManager().getPeerTable().filterByRole(w.SIGNAL,w.ROUTER).filterConnections(e=>e.filterDirectData().filterByStates(s.OPEN));t.forEach(n=>e.getPeerManager().sendMessage(new B(e.getMyAddress(),new m(n.getId()),t,e.getPeerManager().getPeerTable())))}class Re extends C{constructor(e,t,n){super(e,t,u.ROUTER_ALIVE,null),this._body=n}getBody(){return this._body}}function Ae(e){const t=e.getRoleManager().getRole(w.ROUTER);if(!t)return;const n=t.nextSequenceNumber();e.getPeerManager().sendMessage(new Re(e.getMyAddress(),new m(A.getDefault().BROADCAST_ADDRESS),{sequence:n}))}class Pe extends C{constructor(e,t,n){super(e,t,u.ROLE_UPDATE,n)}getBody(){return this._body}}function Oe(e,t,n){n.getPeerManager().getPeerById(e.getId()).setRoles(t);const r=new Pe(n.getMyAddress(),e,t);n.getPeerManager().sendMessage(r)}function Me(e,t){const n=t.getSender(),r=e.getPeerManager().getPeerTable().filterByRole(w.ROUTER).filterConnections(e=>e.filterDirect().filterByStates(s.OPEN,s.OPENING)),i=r.filter(e=>e.getId()===n.getId()).length;t.getSubject()===u.INTRODUCTION&&(i||r.length<A.getDefault().MAX_ROUTERS_PER_SIGNAL?Oe(n,[w.PEER,w.ROUTER],e):Oe(n,[w.PEER],e),function(e,t,n){const r=new B(n.getMyAddress(),e,t,n.getPeerManager().getPeerTable());n.getPeerManager().sendMessage(r)}(n,r,e))}const Ne=new Map;Ne.set(w.PEER,class extends oe{getTaskSchedule(){return[{phase:I.CLEAN,interval:1,task:be},{phase:I.CLEAN,interval:1,task:ue},{phase:I.CLEAN,interval:1,task:ye},{phase:I.CLEAN,interval:1,task:ve},{phase:I.CLEAN,interval:1,task:he},{phase:I.CLEAN,interval:1,task:le},{phase:I.ACQUIRE,interval:1,task:Se},{phase:I.ACQUIRE,interval:1,task:Ee},{phase:I.ACQUIRE,interval:60,task:we},{phase:I.PUBLISH,interval:4,task:_e},{phase:I.PUBLISH,interval:2,task:fe},{phase:I.PUBLISH,interval:4,task:pe}]}onInit(e){e.getPeerManager().activateAcquisitionBoost()}onMessage(e,t){!function(e,t){const n=e.getRoleManager().getConfiguration(),r=e.getPeerManager();t.getSubject()===u.CONNECTION_NEGOTIATION&&t.getReceiver().getId()===r.getMyId()&&r.getPeerTable().countConnections(e=>e.filterDirectData().filterByStates(s.OPEN))>=n.DIRECT_CONNECTIONS_MAX&&r.getPeerTable().filterById(t.getSender().getId()).exclude(e=>e.filterConnections(e=>e.filterDirectData().filterByStates(s.OPEN))).forEach(e=>r.sendPeerSuggestion(e.getId()))}(e,t)}}),Ne.set(w.NEWBIE,class extends oe{getTaskSchedule(){return[{phase:I.PUBLISH,interval:1,task:ce}]}requiresPeer(e){return e.hasRole(w.SIGNAL)}}),Ne.set(w.ROUTER,class extends oe{constructor(){super(...arguments),this._sequenceNumber=1}getTaskSchedule(){return[{phase:I.CLEAN,interval:1,task:Ie},{phase:I.PUBLISH,interval:4,task:Te},{phase:I.PUBLISH,interval:4,task:Ae}]}requiresPeer(e){return e.hasRole(w.SIGNAL)}nextSequenceNumber(){return this._sequenceNumber++}}),Ne.set(w.SIGNAL,class extends oe{getTaskSchedule(){return[{phase:I.PUBLISH,interval:4,task:Te}]}onMessage(e,t){Me(e,t)}requiresPeer(e){return e.hasRole(w.ROUTER)}});class Le{constructor(e,t){this._myId=e,this._roles=new ne,this._roleChurnSubject=new h.a,t.forEach(e=>this.addRole(e))}static getConfigurationForRoles(e){return e.map(e=>({priority:T.get(e),config:A.get(e)})).reduce((e,t)=>e.priority<t.priority?t:e,{priority:0,config:A.getDefault()}).config}addRole(e){if(!this._roles.has(e)){const t=new(Ne.get(e));this._roles.set(e,t),this._roleChurnSubject.next({type:a.ADDED,role:e}),b.getLogger(this._myId).info(`added role ${e}`,`now have roles: ${this.getRoles()}`)}}removeRole(e){this._roles.delete(e),this._roleChurnSubject.next({type:a.REMOVED,role:e}),b.getLogger(this._myId).info(`removed role ${e}`,`left with roles: ${this.getRoles()}`)}updateRoles(e){const t=e.getBody();this._roles.forEach((e,n)=>{-1===t.indexOf(n)&&this.removeRole(n)}),t.forEach(e=>{this.addRole(e)})}onTick(e){this._roles.valuesAsList().forEach(t=>{t.isInitialized()||t.onInit(e)}),this._roles.entriesAsList().map(e=>e[1].getTaskSchedule().map(t=>Object.assign({type:e[0],role:e[1]},t))).reduce((e,t)=>e.concat(t),[]).filter(t=>e.getClock().getTick()%t.interval==0).sort(e=>{const t=T.get(e.type);return 100*e.phase+t}).reverse().forEach(t=>t.task(e))}onMessage(e,t){this._roles.forEach(n=>n.onMessage(e,t))}onConnectionOpen(e,t){this._roles.forEach(n=>n.onConnectionOpen(e,t))}onConnectionClose(e,t){this._roles.forEach(n=>n.onConnectionClose(e,t))}getConfiguration(){return Le.getConfigurationForRoles(Array.from(this._roles.keys()))}getRolesRequiringPeer(e){return this.getRoles().filter(t=>this._roles.get(t).requiresPeer(e))}getRoles(){return Array.from(this._roles.keys())}hasRole(...e){return this.getRoles().filter(t=>e.indexOf(t)>=0).length>0}getRole(e){return this._roles.get(e)}observeRoleChurn(){return this._roleChurnSubject}toString(){return JSON.stringify({count:this._roles.size,roleTypes:Array.from(this._roles.keys())},void 0,2)}destroy(){this._roles.clear(),this._roleChurnSubject.complete()}}class ke{constructor(e,t=0){this._peerId=e,this._capacity=t,this._streamChurnSubject=new h.a}isActive(){return!!this._stream&&this._stream.active}setIsSource(){this._isSource=!0}setIsSink(){this._isSource=!1}isSource(){return!!this._stream&&this._isSource}isSink(){return!!this._stream&&!this._isSource}isLive(){return!!this._stream&&this._stream.getTracks().map(e=>"live"===e.readyState).includes(!0)}isLocal(){return!!this._stream&&this._stream.getTracks().map(e=>!e.remote).includes(!0)}getPeerId(){return this._peerId}getStreamId(){if(this._stream)return this._stream.id}getStream(){return this._stream}setStream(e){this._streamChurnSubject.next({type:a.ADDED,stream:e,channelId:null}),this._stream=e}getCapacity(){return this._capacity}setCapacity(e){this._capacity=e}observeStreamChurn(){return this._streamChurnSubject}destroy(){this._stream&&(this._stream.getTracks().forEach(e=>e.stop()),this._streamChurnSubject.next({type:a.REMOVED,stream:this._stream,channelId:null}),this._stream=null),this._streamChurnSubject.complete()}toString(){return JSON.stringify({id:this._peerId,capacity:this._capacity,stream:this.getStreamId(),active:this.isActive(),live:this.isLive(),local:this.isLocal()},void 0,2)}}class De{constructor(e){this._id=e,this._providerPerId=new ne,this._streamChurnSubject=new h.a}isActive(){return this._providerPerId.asTable().has(e=>e.isActive())}getId(){return this._id}isLive(){return this._providerPerId.asTable().has(e=>e.isLive())}addProvider(e){e.observeStreamChurn().subscribe(e=>this._streamChurnSubject.next({type:e.type,stream:e.stream,channelId:this._id})),this._providerPerId.set(e.getPeerId(),e)}removeProvider(e){const t=this.getProvider(e);return t&&t.destroy(),this._providerPerId.delete(e)}getOrSetProvider(e){let t=this.getProvider(e);return t||(t=new ke(e),this.addProvider(t)),t}getProvider(e){return this._providerPerId.get(e)}getProviderTable(){return this._providerPerId.asTable()}getMediaStream(){const e=this._providerPerId.asTable().find(e=>e.isActive()&&e.isLive()&&e.isSource());if(e)return e.getStream()}asAnnouncement(){return{channelId:this._id,providers:this._providerPerId.asTable().map(e=>({peerId:e.getPeerId(),capacity:e.getCapacity()}))}}observeProviderChurn(){return this._providerPerId.observe()}observeStreamChurn(){return this._streamChurnSubject}destroy(){this._providerPerId.forEach(e=>e.destroy()),this._providerPerId.destroy(),this._streamChurnSubject.complete()}toString(){return JSON.stringify({id:this._id,providers:this._providerPerId.keysAsList()},void 0,2)}}class Be{constructor(e,t){this._myId=e,this._peerManager=t,this._channelPerId=new ne,this.listenOnChannelChurn()}cleanUpEmptyChannels(){this._channelPerId.observe().pipe(Object(l.a)(e=>e.type===a.ADDED)).subscribe(e=>{const t=e.value;t.observeProviderChurn().pipe(Object(l.a)(e=>e.type===a.REMOVED)).subscribe(()=>{0===t.getProviderTable().length&&this.removeChannel(t.getId())})})}pushMyOwnChannelsOut(){this._channelPerId.observe().pipe(Object(l.a)(e=>e.type===a.ADDED&&e.value.getProviderTable().has(e=>e.getPeerId()===this._myId&&e.isActive()&&e.isLive()&&e.isSource()))).subscribe(e=>this.pushStream(e.value.getId(),e.value.getMediaStream()))}listenOnChannelChurn(){this.cleanUpEmptyChannels(),this.pushMyOwnChannelsOut()}setCapacityForPeer(e,t){this._channelPerId.asTable().forEach(n=>{n.getOrSetProvider(e).setCapacity(t)})}pushStreamTo(e,t,n){const r=new m(n,i.WEBRTC_STREAM),s=t.clone(),o={mitosisId:this._myId,channelId:e,stream:s};this._peerManager.connectTo(r,o).then(t=>{b.getLogger(this._myId).info(`pushing stream to ${t.getId()}`,t);const r=this.getOrSetChannel(e).getOrSetProvider(n);r.setStream(s),r.setIsSink()}).catch(e=>{b.getLogger(this._myId).info(`can not open stream to ${n}`,e)})}pushStream(e,t){this._peerManager.getPeerTable().filterByRole(w.PEER).filter(t=>!this.getOrSetChannel(e).getProvider(t.getId())&&!this.amIAlreadyStreamingTo(t.getId())).exclude(e=>e.filterConnections(e=>e.filterByProtocol(i.WEBRTC_STREAM))).filterConnections(e=>e.filterDirect().filterByStates(s.OPEN)).sortByQuality().reverse().slice(0,this.getMyCapacity()).forEach(n=>this.pushStreamTo(e,t,n.getId()))}onConnectionAddedStream(e,t){const n=this.getOrSetChannel(e.getChannelId()),r=e.getAddress().getId(),i=n.getOrSetProvider(r);i.setStream(t),i.setIsSource(),e.isInitiator()||this.pushStream(n.getId(),t)}onConnectionRemovedStream(e){const t=this._channelPerId.get(e.getChannelId());if(t){const n=e.getAddress().getId();t.removeProvider(n)}}amIAlreadyStreamingTo(e){const t=this._peerManager.getPeerById(e);return!!t&&t.getConnectionTable().filterByProtocol(i.WEBRTC_STREAM).length>0}getOrSetChannel(e){let t=this._channelPerId.get(e);return t||(t=new De(e),this._channelPerId.set(t.getId(),t),b.getLogger(this._myId).info(`adding channel ${t.getId()}`,t)),t}removeChannel(e){const t=this._channelPerId.get(e);return t&&(t.destroy(),b.getLogger(this._myId).info(`removing channel ${t.getId()}`,t)),this._channelPerId.delete(e)}getMyCapacity(){const e=this._peerManager.getPeerTable().countConnections(e=>e.filterByStates(s.OPENING,s.OPEN).filterByProtocol(i.WEBRTC_STREAM).filter(e=>e.isInitiator())),t=A.getDefault();return Math.max(0,t.OUTBOUND_STREAM_CONNECTIONS-e)}onConnectionOpen(e){if(e.getAddress().getProtocol()===i.WEBRTC_STREAM){const t=e,n=t.getStream();n&&this.onConnectionAddedStream(t,n),t.observeStreamChurn().subscribe(e=>{switch(e.type){case a.ADDED:this.onConnectionAddedStream(t,e.stream);break;case a.REMOVED:this.onConnectionRemovedStream(t)}})}}onConnectionClose(e){if(e.getAddress().getProtocol()===i.WEBRTC_STREAM){const t=e;this.onConnectionRemovedStream(t)}}negotiateConnection(e){const t=b.getLogger(this._myId),n=e.getSender(),r=e.getReceiver(),a=e.getBody(),c=new C(r,n,u.CONNECTION_NEGOTIATION,{type:L.REJECTION,channelId:a.channelId});if(a.type===L.OFFER){if(!a.channelId)return void t.error("got stream offer without channel id",e);{const n=this.getLocalChannel();if(n&&n.getId()===a.channelId)return t.info("will not accept offer for my own channel",e),void this._peerManager.sendMessage(c);const r=this._peerManager.getPeerTable().aggregateConnections(e=>e.filterByProtocol(i.WEBRTC_STREAM).filterByStates(s.OPENING,s.OPEN).filter(e=>e.getChannelId()===a.channelId).filter(e=>!e.isInitiator()).filter(e=>e.getNegotiationState()>=o.WAITING_FOR_ANSWER));if(r.length>0){if(r.count(e=>e.getNegotiationState()<o.ESTABLISHED)>0)return t.info("already got pending providers for this channel offer",e),void this._peerManager.sendMessage(c);if(this.getOrSetChannel(a.channelId).getProviderTable().count(e=>e.isActive()&&e.isLive()&&e.isSource())>0)return t.info("already got active provider for this channel offer",e),void this._peerManager.sendMessage(c)}}}const h={mitosisId:this._myId,channelId:a.channelId,payload:{type:a.type,sdp:a.sdp}};switch(a.type){case L.REQUEST:if(this.getMyCapacity()>0)if(this.amIAlreadyStreamingTo(n.getId()))t.info(`already streaming to ${n.getId()}, ignoring request`,e);else{const r=a.channelId,i=this.getOrSetChannel(r);i.getProviderTable().has(e=>e.isSource()&&e.isLive()&&e.isActive())?this.pushStreamTo(r,i.getMediaStream(),n.getId()):t.info(`no active stream for this channel, ignoring request from ${n.getId()}`,e)}else t.info(`no capacity to fulfill stream request from ${n.getId()}`,e);break;case L.OFFER:n.getProtocol()===i.WEBRTC_STREAM&&(h.channelId=e.getBody().channelId),this._peerManager.connectTo(n,h).catch(e=>t.warn(`stream offer connection to ${n} failed`,e));break;case L.ANSWER:this._peerManager.connectTo(n).then(r=>{const i=r.getConnectionForAddress(n);i?i.establish(h):t.error(`stream connection ${n.getLocation()} not found`,e)}).catch(e=>t.warn(`stream answer connection to ${n} failed`,e));break;case L.REJECTION:this.setCapacityForPeer(n.getId(),0),t.info(`got stream rejection from ${n.getId()}, setting capacity 0`,e),this._peerManager.getPeerById(n.getId()).getConnectionTable().filterByLocation(r.getLocation()).forEach(e=>{t.warn(`stream connection negotiation rejected by ${n}`,e),e.close()});break;default:throw new Error(`unsupported stream connection negotiation type ${a.type}`)}}getChannelTable(){return this._channelPerId.asTable()}getLocalChannel(){return this.getChannelTable().find(e=>e.getProviderTable().has(e=>e.getPeerId()===this._myId))}getLocalStream(){const e=this.getLocalChannel();if(e)return e.getMediaStream()}setLocalStream(e){this.unsetLocalStream();const t=this.getOrSetChannel(function(){if("undefined"==typeof crypto){let e=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(e+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,t=>{const n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:3&n|8).toString(16)})}return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,e=>(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16))}()),n=t.getOrSetProvider(this._myId);n.setStream(e),n.setIsSource(),b.getLogger(this._myId).info(`adding local channel ${t.getId()}`,t)}unsetLocalStream(){const e=this.getLocalChannel();e&&this.removeChannel(e.getId())}updateProviders(e){e.forEach(e=>{const t=this.getOrSetChannel(e.channelId);e.providers.forEach(e=>{e.peerId!==this._myId&&this._peerManager.getPeerById(e.peerId)&&(t.getOrSetProvider(e.peerId),this.setCapacityForPeer(e.peerId,e.capacity))})})}observeChannelChurn(){return this._channelPerId.observe()}destroy(){this._channelPerId.forEach(e=>e.destroy()),this._channelPerId.destroy()}}class xe{constructor(e=null,t=null,n=null,r=null,i=null){e||(e=new p).start(),this._clock=e,t||(t=new y),this._enclave=t,n?(this._myAddress=m.fromString(n),this._myId=this._myAddress.getId()):(this._myId=`p${Math.round(1e3+8999*Math.random())}`,this._myAddress=new m(this._myId)),i&&i.length||(i=[w.NEWBIE]),this._roleManager=new Le(this._myId,i),r||(r=this._roleManager.getConfiguration().DEFAULT_SIGNAL_ADDRESS),this._signalAddress=m.fromString(r),this._peerManager=new se(this._myId,this._roleManager,this._clock.fork()),this._streamManager=new Be(this._myId,this._peerManager),this._messageBroker=new N(this._peerManager,this._roleManager,this._streamManager),this._inbox=new h.a,this._internalMessages=new h.a,this.listenOnMessages(),this.listenOnAppContentMessages(),this.listenOnConnectionChurn(),this._clock.setInterval(this.onTick.bind(this)),this._logger=b.getLogger(this._myId),this._logger.setClock(this._clock),this._logger.info(`i am a ${i.join(" and a ")}`)}listenOnAppContentMessages(){this._messageBroker.observeAppContentMessages().subscribe(e=>this._inbox.next(e))}listenOnMessages(){this._messageBroker.observeMessages().subscribe(e=>{this._roleManager.onMessage(this,e)}),this._messageBroker.observeIncomingMessages().subscribe(e=>this._internalMessages.next(e))}listenOnConnectionChurn(){this._peerManager.observePeerConnectionChurn().subscribe(e=>{switch(e.type){case a.ADDED:this.listenOnConnectionStateChange(e.connection);break;case a.REMOVED:}})}listenOnConnectionStateChange(e){e.observeStateChange().subscribe(t=>{switch(t){case s.OPEN:this._streamManager.onConnectionOpen(e),this._roleManager.onConnectionOpen(this,e);break;case s.CLOSED:this._streamManager.onConnectionClose(e),this._roleManager.onConnectionClose(this,e)}})}onTick(){try{this._roleManager.onTick(this)}catch(e){throw this._logger.error(e.message,e),e}}getMyAddress(){return this._myAddress}getSignalAddress(){return this._signalAddress}getPeerTable(){return this._peerManager.getPeerTable()}getPeerManager(){return this._peerManager}getInbox(){return this._inbox}observeInternalMessages(){return this._internalMessages}getRoleManager(){return this._roleManager}getStreamManager(){return this._streamManager}getClock(){return this._clock}sendMessageTo(e,t){const n=new S(this.getMyAddress(),new m(e),t);this._peerManager.sendMessage(n)}destroy(){this._inbox.complete(),this._internalMessages.complete(),this._peerManager.destroy(),this._streamManager.destroy(),this._roleManager.destroy(),this._messageBroker.destroy(),this._clock.stop()}toJSON(){const e=this.getPeerManager().getPeerTable(),t=t=>({id:t.getAddress().getId(),quality:t.getMeter().getQuality(e),state:t.getState()}),n=e.aggregateConnections(e=>e.filterByProtocol(i.WEBSOCKET,i.WEBSOCKET_UNSECURE)).map(t),r=e.aggregateConnections(e=>e.filterByProtocol(i.WEBRTC_DATA)).map(t),s=e.aggregateConnections(e=>e.filterByProtocol(i.WEBRTC_STREAM)).filter(e=>e.isInitiator()).map(t),o=this.getStreamManager().getChannelTable().map(e=>({id:e.getId(),providers:e.getProviderTable().map(e=>({peerId:e.getPeerId(),isActive:e.isActive(),isLocal:e.isLocal(),capacity:e.getCapacity()}))}));return{id:this.getMyAddress().getId(),roles:this.getRoleManager().getRoles(),connections:{wss:n,"webrtc-data":r,"webrtc-stream":s},channels:o}}}}).call(this,n(6),n(13).Buffer)},function(e,t,n){e.exports=n(28)},function(e,t,n){"use strict";n.r(t);var r=n(26);const i=document.querySelector("video"),s=document.querySelector("button"),o=new r.a,a=e=>{"added"===e.type&&(i.srcObject=e.stream,i.play())};o.getStreamManager().observeChannelChurn().subscribe(e=>e.value.observeStreamChurn().subscribe(a)),s.addEventListener("click",()=>{navigator.mediaDevices.getUserMedia({video:!0,audio:!1}).then(e=>{o.getStreamManager().setLocalStream(e)})})},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=u(e),r=n[0],o=n[1],a=new s(function(e,t,n){return 3*(t+n)/4-n}(0,r,o)),c=0,h=o>0?r-4:r,l=0;l<h;l+=4)t=i[e.charCodeAt(l)]<<18|i[e.charCodeAt(l+1)]<<12|i[e.charCodeAt(l+2)]<<6|i[e.charCodeAt(l+3)],a[c++]=t>>16&255,a[c++]=t>>8&255,a[c++]=255&t;2===o&&(t=i[e.charCodeAt(l)]<<2|i[e.charCodeAt(l+1)]>>4,a[c++]=255&t);1===o&&(t=i[e.charCodeAt(l)]<<10|i[e.charCodeAt(l+1)]<<4|i[e.charCodeAt(l+2)]>>2,a[c++]=t>>8&255,a[c++]=255&t);return a},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,s=[],o=0,a=n-i;o<a;o+=16383)s.push(h(e,o,o+16383>a?a:o+16383));1===i?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return s.join("")};for(var r=[],i=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=o.length;a<c;++a)r[a]=o[a],i[o.charCodeAt(a)]=a;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function h(e,t,n){for(var i,s,o=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(r[(s=i)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,i){var s,o,a=8*i-r-1,c=(1<<a)-1,u=c>>1,h=-7,l=n?i-1:0,d=n?-1:1,f=e[t+l];for(l+=d,s=f&(1<<-h)-1,f>>=-h,h+=a;h>0;s=256*s+e[t+l],l+=d,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=r;h>0;o=256*o+e[t+l],l+=d,h-=8);if(0===s)s=1-u;else{if(s===c)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,r),s-=u}return(f?-1:1)*o*Math.pow(2,s-r)},t.write=function(e,t,n,r,i,s){var o,a,c,u=8*s-i-1,h=(1<<u)-1,l=h>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:s-1,g=r?1:-1,p=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=h):(o=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-o))<1&&(o--,c*=2),(t+=o+l>=1?d/c:d*Math.pow(2,1-l))*c>=2&&(o++,c/=2),o+l>=h?(a=0,o=h):o+l>=1?(a=(t*c-1)*Math.pow(2,i),o+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,i),o=0));i>=8;e[n+f]=255&a,f+=g,a/=256,i-=8);for(o=o<<i|a,u+=i;u>0;e[n+f]=255&o,f+=g,o/=256,u-=8);e[n+f-g]|=128*p}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(r){t.log=function(...e){return"object"==typeof console&&console.log&&console.log(...e)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,e=>{"%%"!==e&&(r++,"%c"===e&&(i=r))}),t.splice(i,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(33)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(6))},function(e,t,n){e.exports=function(e){function t(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){let n;function o(...e){if(!o.enabled)return;const t=o,i=Number(new Date),s=i-(n||i);t.diff=s,t.prev=n,t.curr=i,n=i,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const s=r.formatters[i];if("function"==typeof s){const r=e[a];n=s.call(t,r),e.splice(a,1),a--}return n}),r.formatArgs.call(t,e),(t.log||r.log).apply(t,e)}return o.namespace=e,o.enabled=r.enabled(e),o.useColors=r.useColors(),o.color=t(e),o.destroy=i,o.extend=s,"function"==typeof r.init&&r.init(o),r.instances.push(o),o}function i(){const e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function s(e,t){const n=r(this.namespace+(void 0===t?":":t)+e);return n.log=this.log,n}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){const e=[...r.names.map(o),...r.skips.map(o).map(e=>"-"+e)].join(",");return r.enable(""),e},r.enable=function(e){let t;r.save(e),r.names=[],r.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(t=0;t<i;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){const e=r.instances[t];e.enabled=r.enabled(e.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;let t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(34),Object.keys(e).forEach(t=>{r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t){var n=1e3,r=60*n,i=60*r,s=24*i,o=7*s,a=365.25*s;function c(e,t,n,r){var i=t>=1.5*n;return Math.round(e/n)+" "+r+(i?"s":"")}e.exports=function(e,t){t=t||{};var u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var c=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*a;case"weeks":case"week":case"w":return c*o;case"days":case"day":case"d":return c*s;case"hours":case"hour":case"hrs":case"hr":case"h":return c*i;case"minutes":case"minute":case"mins":case"min":case"m":return c*r;case"seconds":case"second":case"secs":case"sec":case"s":return c*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?function(e){var t=Math.abs(e);if(t>=s)return c(e,t,s,"day");if(t>=i)return c(e,t,i,"hour");if(t>=r)return c(e,t,r,"minute");if(t>=n)return c(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=s)return Math.round(e/s)+"d";if(t>=i)return Math.round(e/i)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t){e.exports=function(){if("undefined"==typeof window)return null;var e={RTCPeerConnection:window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,RTCSessionDescription:window.RTCSessionDescription||window.mozRTCSessionDescription||window.webkitRTCSessionDescription,RTCIceCandidate:window.RTCIceCandidate||window.mozRTCIceCandidate||window.webkitRTCIceCandidate};return e.RTCPeerConnection?e:null}},function(e,t,n){"use strict";(function(t,r){var i=n(16).Buffer,s=t.crypto||t.msCrypto;s&&s.getRandomValues?e.exports=function(e,n){if(e>65536)throw new Error("requested too many random bytes");var o=new t.Uint8Array(e);e>0&&s.getRandomValues(o);var a=i.from(o.buffer);if("function"==typeof n)return r.nextTick(function(){n(null,a)});return a}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,n(7),n(6))},function(e,t,n){(t=e.exports=n(19)).Stream=t,t.Readable=t,t.Writable=n(23),t.Duplex=n(11),t.Transform=n(25),t.PassThrough=n(46)},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){},function(e,t,n){"use strict";var r=n(16).Buffer,i=n(41);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var t,n,i,s=r.allocUnsafe(e>>>0),o=this.head,a=0;o;)t=o.data,n=s,i=a,t.copy(n,i),a+=o.data.length,o=o.next;return s},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function s(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new s(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new s(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(43),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(7))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,s,o,a,c=1,u={},h=!1,l=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){g(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((s=new MessageChannel).port1.onmessage=function(e){g(e.data)},r=function(e){s.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(i=l.documentElement,r=function(e){var t=l.createElement("script");t.onreadystatechange=function(){g(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(g,0,e)}:(o="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&g(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),r=function(t){e.postMessage(o+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return u[c]=i,r(c),c++},d.clearImmediate=f}function f(e){delete u[e]}function g(e){if(h)setTimeout(g,0,e);else{var t=u[e];if(t){h=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),h=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(7),n(6))},function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),r=!0}return e.apply(this,arguments)}}}).call(this,n(7))},function(e,t,n){var r=n(13),i=r.Buffer;function s(e,t){for(var n in e)t[n]=e[n]}function o(e,t,n){return i(e,t,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(s(r,t),t.Buffer=o),s(i,o),o.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,n)},o.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==t?"string"==typeof n?r.fill(t,n):r.fill(t):r.fill(0),r},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,t,n){"use strict";e.exports=s;var r=n(25),i=n(14);function s(e){if(!(this instanceof s))return new s(e);r.call(this,e)}i.inherits=n(10),i.inherits(s,r),s.prototype._transform=function(e,t,n){n(null,e)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,