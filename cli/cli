#!/usr/bin/env node
global.Event = class MockEvent {
};
global.EventTarget = class MockEventTarget {
};

const chalk = require('chalk');
const fs = require('fs');
const stringify = require('csv-stringify');
const simulator = require('mitosis-simulation');
const mitosis = require('mitosis');
const path = require('path');
const progress = require('cli-progress');

const args = process.argv;

const usage = function () {
  const usageText = `
  run mitosis simulation from the command line

  usage:
    mitosis-cli [-v] scenario [output-dir] [meter-count]

    -v          Verbosity can be increased by adding more v's
    scenario    Path to a scenario JSON file to benchmark
    output-dir  Path to file to write evaluation to, defaults to Desktop. Also accepts path for directory
    meter-count  Amount of metering points 
  `;
  console.log(chalk.green(usageText));
};

let logLevel = mitosis.LogLevel.FATAL;
const verbosityMap = {
  '-v': mitosis.LogLevel.ERROR,
  '-vv': mitosis.LogLevel.WARN,
  '-vvv': mitosis.LogLevel.INFO,
  '-vvvv': mitosis.LogLevel.DEBUG,
  '-vvvvv': mitosis.LogLevel.LOG,
};
args
  .slice()
  .forEach(
    (arg, index) => {
      if (verbosityMap[arg]) {
        logLevel = verbosityMap[arg];
        args.splice(index, 1);
      }
    }
  );

let evalPath;
let meshPath;
const timestamp = getTimestamp();
let scenario;
let meteringInterval = 100;
if (args.length < 3) {
  console.log(chalk.red(`no scenario path provided`));
  usage();
  process.exit(1);
} else if (args.length === 3) {
  scenario = require(args[2]);
  const seed = scenario.configuration['random-seed'] || 'no-seed';
  evalPath = path.join(
    process.env.HOME,
    `${seed}-${path.basename(args[2], '.json')}-${timestamp}.csv`);
  meshPath = path.join(
    process.env.HOME,
    'Desktop', `${seed}-${path.basename(args[2], '.json')}-${timestamp}.json`);
} else if (args.length === 4 || args.length === 5) {
  scenario = require(args[2]);
  const seed = scenario.configuration['random-seed'] || 'no-seed';
  let basePath = args[3];
  const hasFileExtension = args[3].match(/(.*)(\.json|\.csv)/);
  if (hasFileExtension) {
    basePath = basePath.replace(hasFileExtension[2], '') + '-';
  } else if (basePath[basePath.length - 1] !== '/') {
    basePath = basePath + '/';
  }
  evalPath = `${basePath}${seed}-${timestamp}.csv`;
  meshPath = `${basePath}${seed}-${timestamp}.json`;

  if (args.length === 5) {
    meteringInterval = parseInt(args[4]) - 1;
  }
} else if (args.length > 5) {
  console.log(chalk.yellow(`ignoring arguments ${args.splice(4).join(', ')}`));
}

scenario = require(args[2]);

function simulate(simulation, scenario, collector) {
  if (!collector) {
    collector = {eval: [], mesh: []};
  }
  return new Promise(
    resolve => {
      const duration = scenario.instructions[scenario.instructions.length - 1].tick;
      if (logLevel >= mitosis.LogLevel.FATAL) {
        bar.start(duration, 0);
        simulation.getClock().setInterval(() => bar.increment());
      } else {
        console.log(chalk.blue('evaluating next simulation'));
      }
      if (!scenario.benchmark) {
        simulation.getClock().setInterval(
          () => {
            const configDump = dumpConfig();
            const evaluation = evaluate(simulation);
            const eval = Object.assign(evaluation, configDump);
            collector.eval.push(eval);
            collector.mesh.push(dumpMesh(simulation));
          },
          Math.min(duration, Math.max(20, duration / meteringInterval))
        )
      }
      simulation.getClock().setTimeout(() => {
          const mesh = dumpMesh(simulation);
          const eval = Object.assign(
            evaluate(simulation),
            dumpConfig()
          );
          simulation.reset();
          collector.eval.push(eval);
          collector.mesh.push(mesh);
          resolve(collector);
        },
        duration);
      simulation.start(scenario);
    });
}

function getTimestamp() {
  const now = new Date();
  const offsetMs = now.getTimezoneOffset() * 60 * 1000;
  const localDate = new Date(now.getTime() - offsetMs);
  return localDate.toISOString().replace(/[:T]/g, '-').split('.')[0];
}

function dumpConfig() {
  const dump = Object.entries(mitosis.ConfigurationMap.getDefault())
    .map(value => {
      return {[value[0]]: value[1]};
    })
    .reduce(
      (previous, current) =>
        Object.assign(previous, current)
      , {}
    );
  Object.entries(scenario.benchmark || {})
    .forEach(
      entry => {
        if (entry[0] !== 'default') {
          Object.keys(entry[1])
            .forEach(
              key => {
                dump[`${entry[0].toUpperCase()}_${key}`] = mitosis.ConfigurationMap.get(entry[0])[key];
              });
        }
      });
  return dump;
}

function evaluate(simulation) {
  const nodes = Array.from(
    simulation
      .getNodeMap()
      .values()
  );

  const mitoses = nodes.map(
    node => node
      .getMitosis()
  );

  const routers = mitoses
    .filter(
      peer => peer
        .getRoleManager()
        .hasRole(mitosis.RoleType.ROUTER)
    );

  const peers = mitoses
    .filter(
      peer => peer
        .getRoleManager()
        .hasRole(mitosis.RoleType.PEER)
    );

  const newbies = mitoses
    .filter(
      peer => peer
        .getRoleManager()
        .hasRole(mitosis.RoleType.NEWBIE)
    );

  const directConnections = mitoses
    .map(
      peer => peer
        .getPeerTable()
        .aggregateConnections(
          table => table
            .filterDirect()
            .filterByStates(mitosis.ConnectionState.OPEN)
        )
        .asArray()
    )
    .flat();

  const routerPeerTable = routers
    .map(
      router => router
        .getPeerTable()
        .filterConnections(
          table => table
            .filterByStates(mitosis.ConnectionState.OPEN)
        )
        .asArray()
    )
    .flat();

  const totalStats = nodes
    .map(
      node => {
        return node.getNetworkStats();
      }
    )
    .reduce(
      (previous, current) => {
        return {
          in: {
            count: previous.in.count + current.in.count,
            size: previous.in.size + current.in.size
          },
          out: {
            count: previous.out.count + current.out.count,
            size: previous.out.size + current.out.size
          }
        }
      }, {in: {count: 0, size: 0}, out: {count: 0, size: 0}}
    );

  const maxStats = nodes
    .map(
      node => {
        return node.getNetworkStats();
      }
    )
    .reduce(
      (previous, current) => {
        return {
          in: {
            count: Math.max(previous.in.count, current.in.count),
            size: Math.max(previous.in.size, current.in.size)
          },
          out: {
            count: Math.max(previous.out.count, current.out.count),
            size: Math.max(previous.out.size, current.out.size)
          }
        }
      }, {in: {count: 0, size: 0}, out: {count: 0, size: 0}}
    );

  return {
    tickCount: simulation.getClock().getTick(),
    allConns: directConnections.length,
    nodesCount: nodes.length,
    routerCount: routers.length,
    peerCount: peers.length,
    newbieCount: newbies.length,
    routerPeers: routerPeerTable.length,
    maxInKB: Math.floor(maxStats.in.size / 1024),
    maxInCount: maxStats.in.count,
    maxOutKB: Math.floor(maxStats.out.size / 1024),
    maxOutCount: maxStats.out.count,
    totalInKB: Math.floor(totalStats.in.size / 1024),
    totalInCount: totalStats.in.count,
    totalOutKB: Math.floor(totalStats.out.size / 1024),
    totalOutCount: totalStats.out.count
  };
}

function dumpMesh(simulation) {
  return Array.from(
    simulation
      .getNodeMap()
      .values()
  )
    .map(
      node => node.getMitosis().toJSON()
    );
}

class FinishScenario extends simulator.AbstractInstruction {
  execute(simulation) {
    simulation.getClock().pause();
  }
}

function finishBenchmark(results) {
  console.log(chalk.blue('benchmarks complete'));
  stringify(
    results.eval,
    {
      header: true
    },
    (error, evalDump) => {
      fs.writeFile(evalPath, evalDump, error => {
        if (error) {
          return console.log(chalk.red(error));
        }
        const excerpt = evalDump
          .split('\n')
          .map((line, index) => line
            .split(',')
            .slice(0, 8)
            .join(index ? '\t\t' : '\t')
          )
          .slice(0, 6)
          .concat(['...'])
          .join('\n');
        console.log(chalk.gray(excerpt));
        console.log(chalk.blue(`evaluation written to ${evalPath}`));
        if (meshPath) {
          const meshDump = JSON.stringify(results.mesh, undefined, 2);
          fs.writeFile(meshPath, meshDump, error => {
            if (error) {
              return console.log(chalk.red(error));
            }
            console.log(chalk.blue(`mesh description at ${meshPath}`));
            process.exit(0);
          });
        } else {
          process.exit(0);
        }
      });
    });
}

function scheduleBenchmark(simulation, scenario) {
  const queue = [];
  Object.keys(scenario.benchmark)
    .forEach(
      role => {
        let config;
        if (role === 'default') {
          config = mitosis.ConfigurationMap.getDefault();
        } else {
          config = mitosis.ConfigurationMap.get(scenario.benchmark[role]);
        }
        Object.keys(scenario.benchmark[role])
          .forEach(
            key => {
              const bench = scenario.benchmark[role][key];
              for (let i = bench.from; i <= bench.to; i += bench.step) {
                config[key] = i;
                queue.push(
                  prev => simulate(simulation, scenario, prev)
                );
              }
            })
      });
  return queue;
}

function executePromiseQueue(fns) {
  const executeQueue = (
    queueFns,
    promiseContainer,
    isError,
    responseValue) => {
    const queueFn = queueFns.shift();
    if (!promiseContainer) {
      promiseContainer = {promise: null, resolve: null, reject: null};
      promiseContainer.promise = new Promise((resolve, reject) => {
        promiseContainer.resolve = resolve;
        promiseContainer.reject = reject;
      });
    }
    if (!queueFn) {
      if (isError) {
        promiseContainer.reject(responseValue);
      } else {
        promiseContainer.resolve(responseValue);
      }
    } else {
      let returnValue = queueFn(responseValue);
      if (!returnValue || !returnValue.then) {
        if (isError) {
          returnValue = Promise.reject();
        } else {
          returnValue = Promise.resolve();
        }
      }
      returnValue.then(
        (handlerResponse) => {
          executeQueue(queueFns, promiseContainer, false, handlerResponse);
        }, (handlerResponse) => {
          executeQueue(queueFns, promiseContainer, true, handlerResponse);
        });
    }
    return promiseContainer.promise;
  };
  return executeQueue(fns, null);
}

const bar = new progress.Bar({stopOnComplete: true}, progress.Presets.shades_classic);
const sim = simulator.Simulation.getInstance();
sim.setLoggerMaxSize(0);
mitosis.Logger.setVerbose(logLevel <= mitosis.LogLevel.DEBUG);
mitosis.Logger.setLevel(logLevel);
mitosis.Logger.getLogger('simulation').setLevel(logLevel);
simulator.InstructionTypeMap['finish-scenario'] = FinishScenario;
let promise;
if (scenario.benchmark) {
  const queue = scheduleBenchmark(sim, scenario);
  if (logLevel >= mitosis.LogLevel.FATAL) {
    console.log(chalk.blue(`starting ${queue.length} benchmarks`));
  }
  promise = executePromiseQueue(queue);
} else {
  promise = simulate(sim, scenario)
}

promise.then(
  result => finishBenchmark(result)
).catch(
  reason => {
    sim.stop();
    console.log(chalk.red(reason));
  }
);
